// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file aserto/directory/schema/v3/identity.proto (package aserto.directory.schema.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum aserto.directory.schema.v3.IdentityKind
 */
export enum IdentityKind {
  /**
   * undefined state
   *
   * @generated from enum value: IDENTITY_KIND_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * provider unique identifier
   *
   * @generated from enum value: IDENTITY_KIND_PID = 1;
   */
  PID = 1,

  /**
   * email address
   *
   * @generated from enum value: IDENTITY_KIND_EMAIL = 2;
   */
  EMAIL = 2,

  /**
   * username
   *
   * @generated from enum value: IDENTITY_KIND_USERNAME = 3;
   */
  USERNAME = 3,

  /**
   * distinguished name format RFC1779
   *
   * @generated from enum value: IDENTITY_KIND_DN = 4;
   */
  DN = 4,

  /**
   * phone number using the format described in RFC3966, using the E.164 recommendation
   *
   * @generated from enum value: IDENTITY_KIND_PHONE = 5;
   */
  PHONE = 5,

  /**
   * employee identifier
   *
   * @generated from enum value: IDENTITY_KIND_EMPID = 6;
   */
  EMPID = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(IdentityKind)
proto3.util.setEnumType(IdentityKind, "aserto.directory.schema.v3.IdentityKind", [
  { no: 0, name: "IDENTITY_KIND_UNKNOWN" },
  { no: 1, name: "IDENTITY_KIND_PID" },
  { no: 2, name: "IDENTITY_KIND_EMAIL" },
  { no: 3, name: "IDENTITY_KIND_USERNAME" },
  { no: 4, name: "IDENTITY_KIND_DN" },
  { no: 5, name: "IDENTITY_KIND_PHONE" },
  { no: 6, name: "IDENTITY_KIND_EMPID" },
]);

/**
 * Properties of "identity" objects.
 *
 * @generated from message aserto.directory.schema.v3.IdentityProperties
 */
export class IdentityProperties extends Message<IdentityProperties> {
  /**
   * identity kind [email|username|uid|pid|dn|phone]
   *
   * @generated from field: aserto.directory.schema.v3.IdentityKind kind = 1;
   */
  kind = IdentityKind.UNKNOWN;

  /**
   * identity provider name
   *
   * @generated from field: string provider = 2;
   */
  provider = "";

  /**
   * identity has been verified (false when not explicitly specified)
   *
   * @generated from field: bool verified = 3;
   */
  verified = false;

  /**
   * IDP connection id which owns the object instance
   *
   * @generated from field: optional string connection_id = 4;
   */
  connectionId?: string;

  constructor(data?: PartialMessage<IdentityProperties>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.schema.v3.IdentityProperties";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "enum", T: proto3.getEnumType(IdentityKind) },
    { no: 2, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdentityProperties {
    return new IdentityProperties().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdentityProperties {
    return new IdentityProperties().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdentityProperties {
    return new IdentityProperties().fromJsonString(jsonString, options);
  }

  static equals(a: IdentityProperties | PlainMessage<IdentityProperties> | undefined, b: IdentityProperties | PlainMessage<IdentityProperties> | undefined): boolean {
    return proto3.util.equals(IdentityProperties, a, b);
  }
}

