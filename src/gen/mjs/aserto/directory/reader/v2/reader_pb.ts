// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file aserto/directory/reader/v2/reader.proto (package aserto.directory.reader.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Object$, ObjectDependency, ObjectIdentifier, ObjectType, ObjectTypeIdentifier, PaginationRequest, PaginationResponse, Permission, PermissionIdentifier, Relation, RelationIdentifier, RelationType, RelationTypeIdentifier } from "../../common/v2/common_pb.js";

/**
 * @generated from message aserto.directory.reader.v2.GetObjectTypeRequest
 * @deprecated
 */
export class GetObjectTypeRequest extends Message<GetObjectTypeRequest> {
  /**
   * object type selector
   *
   * @generated from field: aserto.directory.common.v2.ObjectTypeIdentifier param = 1;
   */
  param?: ObjectTypeIdentifier;

  constructor(data?: PartialMessage<GetObjectTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetObjectTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "param", kind: "message", T: ObjectTypeIdentifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetObjectTypeRequest {
    return new GetObjectTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetObjectTypeRequest {
    return new GetObjectTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetObjectTypeRequest {
    return new GetObjectTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetObjectTypeRequest | PlainMessage<GetObjectTypeRequest> | undefined, b: GetObjectTypeRequest | PlainMessage<GetObjectTypeRequest> | undefined): boolean {
    return proto3.util.equals(GetObjectTypeRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetObjectTypeResponse
 * @deprecated
 */
export class GetObjectTypeResponse extends Message<GetObjectTypeResponse> {
  /**
   * object type instance
   *
   * @generated from field: aserto.directory.common.v2.ObjectType result = 1;
   */
  result?: ObjectType;

  constructor(data?: PartialMessage<GetObjectTypeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetObjectTypeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: ObjectType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetObjectTypeResponse {
    return new GetObjectTypeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetObjectTypeResponse {
    return new GetObjectTypeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetObjectTypeResponse {
    return new GetObjectTypeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetObjectTypeResponse | PlainMessage<GetObjectTypeResponse> | undefined, b: GetObjectTypeResponse | PlainMessage<GetObjectTypeResponse> | undefined): boolean {
    return proto3.util.equals(GetObjectTypeResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetObjectTypesRequest
 * @deprecated
 */
export class GetObjectTypesRequest extends Message<GetObjectTypesRequest> {
  /**
   * pagination request
   *
   * @generated from field: aserto.directory.common.v2.PaginationRequest page = 9;
   */
  page?: PaginationRequest;

  constructor(data?: PartialMessage<GetObjectTypesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetObjectTypesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 9, name: "page", kind: "message", T: PaginationRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetObjectTypesRequest {
    return new GetObjectTypesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetObjectTypesRequest {
    return new GetObjectTypesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetObjectTypesRequest {
    return new GetObjectTypesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetObjectTypesRequest | PlainMessage<GetObjectTypesRequest> | undefined, b: GetObjectTypesRequest | PlainMessage<GetObjectTypesRequest> | undefined): boolean {
    return proto3.util.equals(GetObjectTypesRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetObjectTypesResponse
 * @deprecated
 */
export class GetObjectTypesResponse extends Message<GetObjectTypesResponse> {
  /**
   * array of object types
   *
   * @generated from field: repeated aserto.directory.common.v2.ObjectType results = 1;
   */
  results: ObjectType[] = [];

  /**
   * pagination response
   *
   * @generated from field: aserto.directory.common.v2.PaginationResponse page = 9;
   */
  page?: PaginationResponse;

  constructor(data?: PartialMessage<GetObjectTypesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetObjectTypesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: ObjectType, repeated: true },
    { no: 9, name: "page", kind: "message", T: PaginationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetObjectTypesResponse {
    return new GetObjectTypesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetObjectTypesResponse {
    return new GetObjectTypesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetObjectTypesResponse {
    return new GetObjectTypesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetObjectTypesResponse | PlainMessage<GetObjectTypesResponse> | undefined, b: GetObjectTypesResponse | PlainMessage<GetObjectTypesResponse> | undefined): boolean {
    return proto3.util.equals(GetObjectTypesResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetRelationTypeRequest
 * @deprecated
 */
export class GetRelationTypeRequest extends Message<GetRelationTypeRequest> {
  /**
   * relation type selector
   *
   * @generated from field: aserto.directory.common.v2.RelationTypeIdentifier param = 1;
   */
  param?: RelationTypeIdentifier;

  constructor(data?: PartialMessage<GetRelationTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetRelationTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "param", kind: "message", T: RelationTypeIdentifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRelationTypeRequest {
    return new GetRelationTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRelationTypeRequest {
    return new GetRelationTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRelationTypeRequest {
    return new GetRelationTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRelationTypeRequest | PlainMessage<GetRelationTypeRequest> | undefined, b: GetRelationTypeRequest | PlainMessage<GetRelationTypeRequest> | undefined): boolean {
    return proto3.util.equals(GetRelationTypeRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetRelationTypeResponse
 * @deprecated
 */
export class GetRelationTypeResponse extends Message<GetRelationTypeResponse> {
  /**
   * relation type instance
   *
   * @generated from field: aserto.directory.common.v2.RelationType result = 1;
   */
  result?: RelationType;

  constructor(data?: PartialMessage<GetRelationTypeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetRelationTypeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: RelationType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRelationTypeResponse {
    return new GetRelationTypeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRelationTypeResponse {
    return new GetRelationTypeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRelationTypeResponse {
    return new GetRelationTypeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRelationTypeResponse | PlainMessage<GetRelationTypeResponse> | undefined, b: GetRelationTypeResponse | PlainMessage<GetRelationTypeResponse> | undefined): boolean {
    return proto3.util.equals(GetRelationTypeResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetRelationTypesRequest
 * @deprecated
 */
export class GetRelationTypesRequest extends Message<GetRelationTypesRequest> {
  /**
   * object type selector
   *
   * @generated from field: aserto.directory.common.v2.ObjectTypeIdentifier param = 1;
   */
  param?: ObjectTypeIdentifier;

  /**
   * pagination request
   *
   * @generated from field: aserto.directory.common.v2.PaginationRequest page = 9;
   */
  page?: PaginationRequest;

  constructor(data?: PartialMessage<GetRelationTypesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetRelationTypesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "param", kind: "message", T: ObjectTypeIdentifier },
    { no: 9, name: "page", kind: "message", T: PaginationRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRelationTypesRequest {
    return new GetRelationTypesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRelationTypesRequest {
    return new GetRelationTypesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRelationTypesRequest {
    return new GetRelationTypesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRelationTypesRequest | PlainMessage<GetRelationTypesRequest> | undefined, b: GetRelationTypesRequest | PlainMessage<GetRelationTypesRequest> | undefined): boolean {
    return proto3.util.equals(GetRelationTypesRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetRelationTypesResponse
 * @deprecated
 */
export class GetRelationTypesResponse extends Message<GetRelationTypesResponse> {
  /**
   * array of relation types
   *
   * @generated from field: repeated aserto.directory.common.v2.RelationType results = 1;
   */
  results: RelationType[] = [];

  /**
   * pagination response
   *
   * @generated from field: aserto.directory.common.v2.PaginationResponse page = 9;
   */
  page?: PaginationResponse;

  constructor(data?: PartialMessage<GetRelationTypesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetRelationTypesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: RelationType, repeated: true },
    { no: 9, name: "page", kind: "message", T: PaginationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRelationTypesResponse {
    return new GetRelationTypesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRelationTypesResponse {
    return new GetRelationTypesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRelationTypesResponse {
    return new GetRelationTypesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRelationTypesResponse | PlainMessage<GetRelationTypesResponse> | undefined, b: GetRelationTypesResponse | PlainMessage<GetRelationTypesResponse> | undefined): boolean {
    return proto3.util.equals(GetRelationTypesResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetObjectRequest
 * @deprecated
 */
export class GetObjectRequest extends Message<GetObjectRequest> {
  /**
   * object selector
   *
   * @generated from field: aserto.directory.common.v2.ObjectIdentifier param = 1;
   */
  param?: ObjectIdentifier;

  /**
   * materialize the object relations objects
   *
   * @generated from field: optional bool with_relations = 2;
   */
  withRelations?: boolean;

  /**
   * pagination request
   *
   * @generated from field: aserto.directory.common.v2.PaginationRequest page = 9;
   */
  page?: PaginationRequest;

  constructor(data?: PartialMessage<GetObjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetObjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "param", kind: "message", T: ObjectIdentifier },
    { no: 2, name: "with_relations", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 9, name: "page", kind: "message", T: PaginationRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetObjectRequest {
    return new GetObjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetObjectRequest {
    return new GetObjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetObjectRequest {
    return new GetObjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetObjectRequest | PlainMessage<GetObjectRequest> | undefined, b: GetObjectRequest | PlainMessage<GetObjectRequest> | undefined): boolean {
    return proto3.util.equals(GetObjectRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetObjectResponse
 * @deprecated
 */
export class GetObjectResponse extends Message<GetObjectResponse> {
  /**
   * object instance
   *
   * @generated from field: aserto.directory.common.v2.Object result = 1;
   */
  result?: Object$;

  /**
   * object relations
   *
   * @generated from field: repeated aserto.directory.common.v2.Relation relations = 4;
   */
  relations: Relation[] = [];

  /**
   * pagination response
   *
   * @generated from field: aserto.directory.common.v2.PaginationResponse page = 9;
   */
  page?: PaginationResponse;

  constructor(data?: PartialMessage<GetObjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetObjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Object$ },
    { no: 4, name: "relations", kind: "message", T: Relation, repeated: true },
    { no: 9, name: "page", kind: "message", T: PaginationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetObjectResponse {
    return new GetObjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetObjectResponse {
    return new GetObjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetObjectResponse {
    return new GetObjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetObjectResponse | PlainMessage<GetObjectResponse> | undefined, b: GetObjectResponse | PlainMessage<GetObjectResponse> | undefined): boolean {
    return proto3.util.equals(GetObjectResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetObjectManyRequest
 * @deprecated
 */
export class GetObjectManyRequest extends Message<GetObjectManyRequest> {
  /**
   * object identifier list
   *
   * @generated from field: repeated aserto.directory.common.v2.ObjectIdentifier param = 1;
   */
  param: ObjectIdentifier[] = [];

  constructor(data?: PartialMessage<GetObjectManyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetObjectManyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "param", kind: "message", T: ObjectIdentifier, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetObjectManyRequest {
    return new GetObjectManyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetObjectManyRequest {
    return new GetObjectManyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetObjectManyRequest {
    return new GetObjectManyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetObjectManyRequest | PlainMessage<GetObjectManyRequest> | undefined, b: GetObjectManyRequest | PlainMessage<GetObjectManyRequest> | undefined): boolean {
    return proto3.util.equals(GetObjectManyRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetObjectManyResponse
 * @deprecated
 */
export class GetObjectManyResponse extends Message<GetObjectManyResponse> {
  /**
   * array of object instances
   *
   * @generated from field: repeated aserto.directory.common.v2.Object results = 1;
   */
  results: Object$[] = [];

  constructor(data?: PartialMessage<GetObjectManyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetObjectManyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: Object$, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetObjectManyResponse {
    return new GetObjectManyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetObjectManyResponse {
    return new GetObjectManyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetObjectManyResponse {
    return new GetObjectManyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetObjectManyResponse | PlainMessage<GetObjectManyResponse> | undefined, b: GetObjectManyResponse | PlainMessage<GetObjectManyResponse> | undefined): boolean {
    return proto3.util.equals(GetObjectManyResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetObjectsRequest
 * @deprecated
 */
export class GetObjectsRequest extends Message<GetObjectsRequest> {
  /**
   * object type selector
   *
   * @generated from field: aserto.directory.common.v2.ObjectTypeIdentifier param = 1;
   */
  param?: ObjectTypeIdentifier;

  /**
   * pagination request
   *
   * @generated from field: aserto.directory.common.v2.PaginationRequest page = 9;
   */
  page?: PaginationRequest;

  constructor(data?: PartialMessage<GetObjectsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetObjectsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "param", kind: "message", T: ObjectTypeIdentifier },
    { no: 9, name: "page", kind: "message", T: PaginationRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetObjectsRequest {
    return new GetObjectsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetObjectsRequest {
    return new GetObjectsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetObjectsRequest {
    return new GetObjectsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetObjectsRequest | PlainMessage<GetObjectsRequest> | undefined, b: GetObjectsRequest | PlainMessage<GetObjectsRequest> | undefined): boolean {
    return proto3.util.equals(GetObjectsRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetObjectsResponse
 * @deprecated
 */
export class GetObjectsResponse extends Message<GetObjectsResponse> {
  /**
   * array of object instances
   *
   * @generated from field: repeated aserto.directory.common.v2.Object results = 1;
   */
  results: Object$[] = [];

  /**
   * pagination response
   *
   * @generated from field: aserto.directory.common.v2.PaginationResponse page = 9;
   */
  page?: PaginationResponse;

  constructor(data?: PartialMessage<GetObjectsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetObjectsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: Object$, repeated: true },
    { no: 9, name: "page", kind: "message", T: PaginationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetObjectsResponse {
    return new GetObjectsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetObjectsResponse {
    return new GetObjectsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetObjectsResponse {
    return new GetObjectsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetObjectsResponse | PlainMessage<GetObjectsResponse> | undefined, b: GetObjectsResponse | PlainMessage<GetObjectsResponse> | undefined): boolean {
    return proto3.util.equals(GetObjectsResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetRelationRequest
 * @deprecated
 */
export class GetRelationRequest extends Message<GetRelationRequest> {
  /**
   * relation selector
   *
   * @generated from field: aserto.directory.common.v2.RelationIdentifier param = 1;
   */
  param?: RelationIdentifier;

  /**
   * materialize relation objects
   *
   * @generated from field: optional bool with_objects = 2;
   */
  withObjects?: boolean;

  constructor(data?: PartialMessage<GetRelationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetRelationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "param", kind: "message", T: RelationIdentifier },
    { no: 2, name: "with_objects", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRelationRequest {
    return new GetRelationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRelationRequest {
    return new GetRelationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRelationRequest {
    return new GetRelationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRelationRequest | PlainMessage<GetRelationRequest> | undefined, b: GetRelationRequest | PlainMessage<GetRelationRequest> | undefined): boolean {
    return proto3.util.equals(GetRelationRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetRelationResponse
 * @deprecated
 */
export class GetRelationResponse extends Message<GetRelationResponse> {
  /**
   * array of relation instances
   *
   * @generated from field: repeated aserto.directory.common.v2.Relation results = 1;
   */
  results: Relation[] = [];

  /**
   * map of materialized relation objects
   *
   * @generated from field: map<string, aserto.directory.common.v2.Object> objects = 2;
   */
  objects: { [key: string]: Object$ } = {};

  constructor(data?: PartialMessage<GetRelationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetRelationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: Relation, repeated: true },
    { no: 2, name: "objects", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Object$} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRelationResponse {
    return new GetRelationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRelationResponse {
    return new GetRelationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRelationResponse {
    return new GetRelationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRelationResponse | PlainMessage<GetRelationResponse> | undefined, b: GetRelationResponse | PlainMessage<GetRelationResponse> | undefined): boolean {
    return proto3.util.equals(GetRelationResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetRelationsRequest
 * @deprecated
 */
export class GetRelationsRequest extends Message<GetRelationsRequest> {
  /**
   * relation selector
   *
   * @generated from field: aserto.directory.common.v2.RelationIdentifier param = 1;
   */
  param?: RelationIdentifier;

  /**
   * pagination request
   *
   * @generated from field: aserto.directory.common.v2.PaginationRequest page = 9;
   */
  page?: PaginationRequest;

  constructor(data?: PartialMessage<GetRelationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetRelationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "param", kind: "message", T: RelationIdentifier },
    { no: 9, name: "page", kind: "message", T: PaginationRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRelationsRequest {
    return new GetRelationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRelationsRequest {
    return new GetRelationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRelationsRequest {
    return new GetRelationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRelationsRequest | PlainMessage<GetRelationsRequest> | undefined, b: GetRelationsRequest | PlainMessage<GetRelationsRequest> | undefined): boolean {
    return proto3.util.equals(GetRelationsRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetRelationsResponse
 * @deprecated
 */
export class GetRelationsResponse extends Message<GetRelationsResponse> {
  /**
   * array of relation instances
   *
   * @generated from field: repeated aserto.directory.common.v2.Relation results = 1;
   */
  results: Relation[] = [];

  /**
   * pagination response
   *
   * @generated from field: aserto.directory.common.v2.PaginationResponse page = 9;
   */
  page?: PaginationResponse;

  constructor(data?: PartialMessage<GetRelationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetRelationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: Relation, repeated: true },
    { no: 9, name: "page", kind: "message", T: PaginationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRelationsResponse {
    return new GetRelationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRelationsResponse {
    return new GetRelationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRelationsResponse {
    return new GetRelationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRelationsResponse | PlainMessage<GetRelationsResponse> | undefined, b: GetRelationsResponse | PlainMessage<GetRelationsResponse> | undefined): boolean {
    return proto3.util.equals(GetRelationsResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetPermissionRequest
 * @deprecated
 */
export class GetPermissionRequest extends Message<GetPermissionRequest> {
  /**
   * permission selector
   *
   * @generated from field: aserto.directory.common.v2.PermissionIdentifier param = 1;
   */
  param?: PermissionIdentifier;

  constructor(data?: PartialMessage<GetPermissionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetPermissionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "param", kind: "message", T: PermissionIdentifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPermissionRequest {
    return new GetPermissionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPermissionRequest {
    return new GetPermissionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPermissionRequest {
    return new GetPermissionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPermissionRequest | PlainMessage<GetPermissionRequest> | undefined, b: GetPermissionRequest | PlainMessage<GetPermissionRequest> | undefined): boolean {
    return proto3.util.equals(GetPermissionRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetPermissionResponse
 * @deprecated
 */
export class GetPermissionResponse extends Message<GetPermissionResponse> {
  /**
   * permission instance
   *
   * @generated from field: aserto.directory.common.v2.Permission result = 1;
   */
  result?: Permission;

  constructor(data?: PartialMessage<GetPermissionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetPermissionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Permission },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPermissionResponse {
    return new GetPermissionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPermissionResponse {
    return new GetPermissionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPermissionResponse {
    return new GetPermissionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPermissionResponse | PlainMessage<GetPermissionResponse> | undefined, b: GetPermissionResponse | PlainMessage<GetPermissionResponse> | undefined): boolean {
    return proto3.util.equals(GetPermissionResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetPermissionsRequest
 * @deprecated
 */
export class GetPermissionsRequest extends Message<GetPermissionsRequest> {
  /**
   * pagination request
   *
   * @generated from field: aserto.directory.common.v2.PaginationRequest page = 9;
   */
  page?: PaginationRequest;

  constructor(data?: PartialMessage<GetPermissionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetPermissionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 9, name: "page", kind: "message", T: PaginationRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPermissionsRequest {
    return new GetPermissionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPermissionsRequest {
    return new GetPermissionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPermissionsRequest {
    return new GetPermissionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPermissionsRequest | PlainMessage<GetPermissionsRequest> | undefined, b: GetPermissionsRequest | PlainMessage<GetPermissionsRequest> | undefined): boolean {
    return proto3.util.equals(GetPermissionsRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetPermissionsResponse
 * @deprecated
 */
export class GetPermissionsResponse extends Message<GetPermissionsResponse> {
  /**
   * array of permissions
   *
   * @generated from field: repeated aserto.directory.common.v2.Permission results = 1;
   */
  results: Permission[] = [];

  /**
   * pagination response
   *
   * @generated from field: aserto.directory.common.v2.PaginationResponse page = 9;
   */
  page?: PaginationResponse;

  constructor(data?: PartialMessage<GetPermissionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetPermissionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: Permission, repeated: true },
    { no: 9, name: "page", kind: "message", T: PaginationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPermissionsResponse {
    return new GetPermissionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPermissionsResponse {
    return new GetPermissionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPermissionsResponse {
    return new GetPermissionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPermissionsResponse | PlainMessage<GetPermissionsResponse> | undefined, b: GetPermissionsResponse | PlainMessage<GetPermissionsResponse> | undefined): boolean {
    return proto3.util.equals(GetPermissionsResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.CheckPermissionRequest
 * @deprecated
 */
export class CheckPermissionRequest extends Message<CheckPermissionRequest> {
  /**
   * subject selector
   *
   * @generated from field: aserto.directory.common.v2.ObjectIdentifier subject = 1;
   */
  subject?: ObjectIdentifier;

  /**
   * permission selector
   *
   * @generated from field: aserto.directory.common.v2.PermissionIdentifier permission = 2;
   */
  permission?: PermissionIdentifier;

  /**
   * object selector
   *
   * @generated from field: aserto.directory.common.v2.ObjectIdentifier object = 3;
   */
  object?: ObjectIdentifier;

  /**
   * collect trace information
   *
   * @generated from field: bool trace = 7;
   */
  trace = false;

  constructor(data?: PartialMessage<CheckPermissionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.CheckPermissionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subject", kind: "message", T: ObjectIdentifier },
    { no: 2, name: "permission", kind: "message", T: PermissionIdentifier },
    { no: 3, name: "object", kind: "message", T: ObjectIdentifier },
    { no: 7, name: "trace", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckPermissionRequest {
    return new CheckPermissionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckPermissionRequest {
    return new CheckPermissionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckPermissionRequest {
    return new CheckPermissionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckPermissionRequest | PlainMessage<CheckPermissionRequest> | undefined, b: CheckPermissionRequest | PlainMessage<CheckPermissionRequest> | undefined): boolean {
    return proto3.util.equals(CheckPermissionRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.CheckPermissionResponse
 * @deprecated
 */
export class CheckPermissionResponse extends Message<CheckPermissionResponse> {
  /**
   * check result
   *
   * @generated from field: bool check = 1;
   */
  check = false;

  /**
   * trace information
   *
   * @generated from field: repeated string trace = 2;
   */
  trace: string[] = [];

  constructor(data?: PartialMessage<CheckPermissionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.CheckPermissionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "trace", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckPermissionResponse {
    return new CheckPermissionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckPermissionResponse {
    return new CheckPermissionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckPermissionResponse {
    return new CheckPermissionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckPermissionResponse | PlainMessage<CheckPermissionResponse> | undefined, b: CheckPermissionResponse | PlainMessage<CheckPermissionResponse> | undefined): boolean {
    return proto3.util.equals(CheckPermissionResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.CheckRelationRequest
 * @deprecated
 */
export class CheckRelationRequest extends Message<CheckRelationRequest> {
  /**
   * subject selector
   *
   * @generated from field: aserto.directory.common.v2.ObjectIdentifier subject = 1;
   */
  subject?: ObjectIdentifier;

  /**
   * relation selector
   *
   * @generated from field: aserto.directory.common.v2.RelationTypeIdentifier relation = 2;
   */
  relation?: RelationTypeIdentifier;

  /**
   * object selector
   *
   * @generated from field: aserto.directory.common.v2.ObjectIdentifier object = 3;
   */
  object?: ObjectIdentifier;

  /**
   * collect trace information
   *
   * @generated from field: bool trace = 7;
   */
  trace = false;

  constructor(data?: PartialMessage<CheckRelationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.CheckRelationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subject", kind: "message", T: ObjectIdentifier },
    { no: 2, name: "relation", kind: "message", T: RelationTypeIdentifier },
    { no: 3, name: "object", kind: "message", T: ObjectIdentifier },
    { no: 7, name: "trace", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckRelationRequest {
    return new CheckRelationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckRelationRequest {
    return new CheckRelationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckRelationRequest {
    return new CheckRelationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckRelationRequest | PlainMessage<CheckRelationRequest> | undefined, b: CheckRelationRequest | PlainMessage<CheckRelationRequest> | undefined): boolean {
    return proto3.util.equals(CheckRelationRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.CheckRelationResponse
 * @deprecated
 */
export class CheckRelationResponse extends Message<CheckRelationResponse> {
  /**
   * check result
   *
   * @generated from field: bool check = 1;
   */
  check = false;

  /**
   * trace information
   *
   * @generated from field: repeated string trace = 2;
   */
  trace: string[] = [];

  constructor(data?: PartialMessage<CheckRelationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.CheckRelationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "trace", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckRelationResponse {
    return new CheckRelationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckRelationResponse {
    return new CheckRelationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckRelationResponse {
    return new CheckRelationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckRelationResponse | PlainMessage<CheckRelationResponse> | undefined, b: CheckRelationResponse | PlainMessage<CheckRelationResponse> | undefined): boolean {
    return proto3.util.equals(CheckRelationResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.CheckResponse
 * @deprecated
 */
export class CheckResponse extends Message<CheckResponse> {
  /**
   * check result
   *
   * @generated from field: bool check = 1;
   */
  check = false;

  /**
   * trace information
   *
   * @generated from field: repeated string trace = 2;
   */
  trace: string[] = [];

  constructor(data?: PartialMessage<CheckResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.CheckResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "trace", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckResponse {
    return new CheckResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckResponse {
    return new CheckResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckResponse {
    return new CheckResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckResponse | PlainMessage<CheckResponse> | undefined, b: CheckResponse | PlainMessage<CheckResponse> | undefined): boolean {
    return proto3.util.equals(CheckResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetGraphRequest
 * @deprecated
 */
export class GetGraphRequest extends Message<GetGraphRequest> {
  /**
   * anchor selector
   *
   * @generated from field: aserto.directory.common.v2.ObjectIdentifier anchor = 1;
   */
  anchor?: ObjectIdentifier;

  /**
   * subject selector
   *
   * @generated from field: aserto.directory.common.v2.ObjectIdentifier subject = 2;
   */
  subject?: ObjectIdentifier;

  /**
   * relation selector
   *
   * @generated from field: aserto.directory.common.v2.RelationTypeIdentifier relation = 3;
   */
  relation?: RelationTypeIdentifier;

  /**
   * object selector
   *
   * @generated from field: aserto.directory.common.v2.ObjectIdentifier object = 4;
   */
  object?: ObjectIdentifier;

  constructor(data?: PartialMessage<GetGraphRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetGraphRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "anchor", kind: "message", T: ObjectIdentifier },
    { no: 2, name: "subject", kind: "message", T: ObjectIdentifier },
    { no: 3, name: "relation", kind: "message", T: RelationTypeIdentifier },
    { no: 4, name: "object", kind: "message", T: ObjectIdentifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGraphRequest {
    return new GetGraphRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGraphRequest {
    return new GetGraphRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGraphRequest {
    return new GetGraphRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGraphRequest | PlainMessage<GetGraphRequest> | undefined, b: GetGraphRequest | PlainMessage<GetGraphRequest> | undefined): boolean {
    return proto3.util.equals(GetGraphRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v2.GetGraphResponse
 * @deprecated
 */
export class GetGraphResponse extends Message<GetGraphResponse> {
  /**
   * dependency graph
   *
   * @generated from field: repeated aserto.directory.common.v2.ObjectDependency results = 1;
   */
  results: ObjectDependency[] = [];

  constructor(data?: PartialMessage<GetGraphResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v2.GetGraphResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: ObjectDependency, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGraphResponse {
    return new GetGraphResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGraphResponse {
    return new GetGraphResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGraphResponse {
    return new GetGraphResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetGraphResponse | PlainMessage<GetGraphResponse> | undefined, b: GetGraphResponse | PlainMessage<GetGraphResponse> | undefined): boolean {
    return proto3.util.equals(GetGraphResponse, a, b);
  }
}

