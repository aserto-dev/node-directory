// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file aserto/directory/reader/v3/reader.proto (package aserto.directory.reader.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Object$, ObjectDependency, ObjectIdentifier, PaginationRequest, PaginationResponse, Relation } from "../../common/v3/common_pb.js";

/**
 * @generated from message aserto.directory.reader.v3.GetObjectRequest
 */
export class GetObjectRequest extends Message<GetObjectRequest> {
  /**
   * object type name (lc-string)
   *
   * @generated from field: string object_type = 1;
   */
  objectType = "";

  /**
   * object identifier (cs-string)
   *
   * @generated from field: string object_id = 2;
   */
  objectId = "";

  /**
   * materialize the object relations objects
   *
   * @generated from field: bool with_relations = 3;
   */
  withRelations = false;

  /**
   * pagination request
   *
   * @generated from field: aserto.directory.common.v3.PaginationRequest page = 9;
   */
  page?: PaginationRequest;

  constructor(data?: PartialMessage<GetObjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v3.GetObjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "with_relations", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "page", kind: "message", T: PaginationRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetObjectRequest {
    return new GetObjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetObjectRequest {
    return new GetObjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetObjectRequest {
    return new GetObjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetObjectRequest | PlainMessage<GetObjectRequest> | undefined, b: GetObjectRequest | PlainMessage<GetObjectRequest> | undefined): boolean {
    return proto3.util.equals(GetObjectRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v3.GetObjectResponse
 */
export class GetObjectResponse extends Message<GetObjectResponse> {
  /**
   * object instance
   *
   * @generated from field: aserto.directory.common.v3.Object result = 1;
   */
  result?: Object$;

  /**
   * object relations
   *
   * @generated from field: repeated aserto.directory.common.v3.Relation relations = 4;
   */
  relations: Relation[] = [];

  /**
   * pagination response
   *
   * @generated from field: aserto.directory.common.v3.PaginationResponse page = 9;
   */
  page?: PaginationResponse;

  constructor(data?: PartialMessage<GetObjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v3.GetObjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Object$ },
    { no: 4, name: "relations", kind: "message", T: Relation, repeated: true },
    { no: 9, name: "page", kind: "message", T: PaginationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetObjectResponse {
    return new GetObjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetObjectResponse {
    return new GetObjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetObjectResponse {
    return new GetObjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetObjectResponse | PlainMessage<GetObjectResponse> | undefined, b: GetObjectResponse | PlainMessage<GetObjectResponse> | undefined): boolean {
    return proto3.util.equals(GetObjectResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v3.GetObjectManyRequest
 */
export class GetObjectManyRequest extends Message<GetObjectManyRequest> {
  /**
   * object identifier list
   *
   * @generated from field: repeated aserto.directory.common.v3.ObjectIdentifier param = 1;
   */
  param: ObjectIdentifier[] = [];

  constructor(data?: PartialMessage<GetObjectManyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v3.GetObjectManyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "param", kind: "message", T: ObjectIdentifier, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetObjectManyRequest {
    return new GetObjectManyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetObjectManyRequest {
    return new GetObjectManyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetObjectManyRequest {
    return new GetObjectManyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetObjectManyRequest | PlainMessage<GetObjectManyRequest> | undefined, b: GetObjectManyRequest | PlainMessage<GetObjectManyRequest> | undefined): boolean {
    return proto3.util.equals(GetObjectManyRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v3.GetObjectManyResponse
 */
export class GetObjectManyResponse extends Message<GetObjectManyResponse> {
  /**
   * array of object instances
   *
   * @generated from field: repeated aserto.directory.common.v3.Object results = 1;
   */
  results: Object$[] = [];

  constructor(data?: PartialMessage<GetObjectManyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v3.GetObjectManyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: Object$, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetObjectManyResponse {
    return new GetObjectManyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetObjectManyResponse {
    return new GetObjectManyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetObjectManyResponse {
    return new GetObjectManyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetObjectManyResponse | PlainMessage<GetObjectManyResponse> | undefined, b: GetObjectManyResponse | PlainMessage<GetObjectManyResponse> | undefined): boolean {
    return proto3.util.equals(GetObjectManyResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v3.GetObjectsRequest
 */
export class GetObjectsRequest extends Message<GetObjectsRequest> {
  /**
   * object type name (lc-string)
   *
   * @generated from field: string object_type = 1;
   */
  objectType = "";

  /**
   * pagination request
   *
   * @generated from field: aserto.directory.common.v3.PaginationRequest page = 9;
   */
  page?: PaginationRequest;

  constructor(data?: PartialMessage<GetObjectsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v3.GetObjectsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "page", kind: "message", T: PaginationRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetObjectsRequest {
    return new GetObjectsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetObjectsRequest {
    return new GetObjectsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetObjectsRequest {
    return new GetObjectsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetObjectsRequest | PlainMessage<GetObjectsRequest> | undefined, b: GetObjectsRequest | PlainMessage<GetObjectsRequest> | undefined): boolean {
    return proto3.util.equals(GetObjectsRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v3.GetObjectsResponse
 */
export class GetObjectsResponse extends Message<GetObjectsResponse> {
  /**
   * array of object instances
   *
   * @generated from field: repeated aserto.directory.common.v3.Object results = 1;
   */
  results: Object$[] = [];

  /**
   * pagination response
   *
   * @generated from field: aserto.directory.common.v3.PaginationResponse page = 9;
   */
  page?: PaginationResponse;

  constructor(data?: PartialMessage<GetObjectsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v3.GetObjectsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: Object$, repeated: true },
    { no: 9, name: "page", kind: "message", T: PaginationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetObjectsResponse {
    return new GetObjectsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetObjectsResponse {
    return new GetObjectsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetObjectsResponse {
    return new GetObjectsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetObjectsResponse | PlainMessage<GetObjectsResponse> | undefined, b: GetObjectsResponse | PlainMessage<GetObjectsResponse> | undefined): boolean {
    return proto3.util.equals(GetObjectsResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v3.GetRelationRequest
 */
export class GetRelationRequest extends Message<GetRelationRequest> {
  /**
   * object type
   *
   * @generated from field: string object_type = 1;
   */
  objectType = "";

  /**
   * object identifier
   *
   * @generated from field: string object_id = 2;
   */
  objectId = "";

  /**
   * relation name
   *
   * @generated from field: string relation = 3;
   */
  relation = "";

  /**
   * subject type
   *
   * @generated from field: string subject_type = 4;
   */
  subjectType = "";

  /**
   * subject identifier
   *
   * @generated from field: string subject_id = 5;
   */
  subjectId = "";

  /**
   * optional subject relation name
   *
   * @generated from field: string subject_relation = 6;
   */
  subjectRelation = "";

  /**
   * materialize relation objects
   *
   * @generated from field: bool with_objects = 7;
   */
  withObjects = false;

  constructor(data?: PartialMessage<GetRelationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v3.GetRelationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "relation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "subject_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "subject_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "subject_relation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "with_objects", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRelationRequest {
    return new GetRelationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRelationRequest {
    return new GetRelationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRelationRequest {
    return new GetRelationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRelationRequest | PlainMessage<GetRelationRequest> | undefined, b: GetRelationRequest | PlainMessage<GetRelationRequest> | undefined): boolean {
    return proto3.util.equals(GetRelationRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v3.GetRelationResponse
 */
export class GetRelationResponse extends Message<GetRelationResponse> {
  /**
   * relation instance
   *
   * @generated from field: aserto.directory.common.v3.Relation result = 1;
   */
  result?: Relation;

  /**
   * map of materialized relation objects
   *
   * @generated from field: map<string, aserto.directory.common.v3.Object> objects = 2;
   */
  objects: { [key: string]: Object$ } = {};

  constructor(data?: PartialMessage<GetRelationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v3.GetRelationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Relation },
    { no: 2, name: "objects", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Object$} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRelationResponse {
    return new GetRelationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRelationResponse {
    return new GetRelationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRelationResponse {
    return new GetRelationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRelationResponse | PlainMessage<GetRelationResponse> | undefined, b: GetRelationResponse | PlainMessage<GetRelationResponse> | undefined): boolean {
    return proto3.util.equals(GetRelationResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v3.GetRelationsRequest
 */
export class GetRelationsRequest extends Message<GetRelationsRequest> {
  /**
   * object type
   *
   * @generated from field: string object_type = 1;
   */
  objectType = "";

  /**
   * object identifier
   *
   * @generated from field: string object_id = 2;
   */
  objectId = "";

  /**
   * relation name
   *
   * @generated from field: string relation = 3;
   */
  relation = "";

  /**
   * subject type
   *
   * @generated from field: string subject_type = 4;
   */
  subjectType = "";

  /**
   * subject identifier
   *
   * @generated from field: string subject_id = 5;
   */
  subjectId = "";

  /**
   * optional subject relation name
   *
   * @generated from field: string subject_relation = 6;
   */
  subjectRelation = "";

  /**
   * materialize relation objects
   *
   * @generated from field: bool with_objects = 7;
   */
  withObjects = false;

  /**
   * only return relations that do not have a subject relation.
   *
   * @generated from field: bool with_empty_subject_relation = 8;
   */
  withEmptySubjectRelation = false;

  /**
   * pagination request
   *
   * @generated from field: aserto.directory.common.v3.PaginationRequest page = 9;
   */
  page?: PaginationRequest;

  constructor(data?: PartialMessage<GetRelationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v3.GetRelationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "relation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "subject_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "subject_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "subject_relation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "with_objects", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "with_empty_subject_relation", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "page", kind: "message", T: PaginationRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRelationsRequest {
    return new GetRelationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRelationsRequest {
    return new GetRelationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRelationsRequest {
    return new GetRelationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRelationsRequest | PlainMessage<GetRelationsRequest> | undefined, b: GetRelationsRequest | PlainMessage<GetRelationsRequest> | undefined): boolean {
    return proto3.util.equals(GetRelationsRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v3.GetRelationsResponse
 */
export class GetRelationsResponse extends Message<GetRelationsResponse> {
  /**
   * array of relation instances
   *
   * @generated from field: repeated aserto.directory.common.v3.Relation results = 1;
   */
  results: Relation[] = [];

  /**
   * map of materialized relation objects
   *
   * @generated from field: map<string, aserto.directory.common.v3.Object> objects = 2;
   */
  objects: { [key: string]: Object$ } = {};

  /**
   * pagination response
   *
   * @generated from field: aserto.directory.common.v3.PaginationResponse page = 9;
   */
  page?: PaginationResponse;

  constructor(data?: PartialMessage<GetRelationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v3.GetRelationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: Relation, repeated: true },
    { no: 2, name: "objects", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Object$} },
    { no: 9, name: "page", kind: "message", T: PaginationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRelationsResponse {
    return new GetRelationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRelationsResponse {
    return new GetRelationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRelationsResponse {
    return new GetRelationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRelationsResponse | PlainMessage<GetRelationsResponse> | undefined, b: GetRelationsResponse | PlainMessage<GetRelationsResponse> | undefined): boolean {
    return proto3.util.equals(GetRelationsResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v3.CheckRequest
 */
export class CheckRequest extends Message<CheckRequest> {
  /**
   * object type
   *
   * @generated from field: string object_type = 1;
   */
  objectType = "";

  /**
   * object identifier
   *
   * @generated from field: string object_id = 2;
   */
  objectId = "";

  /**
   * relation name
   *
   * @generated from field: string relation = 3;
   */
  relation = "";

  /**
   * subject type
   *
   * @generated from field: string subject_type = 4;
   */
  subjectType = "";

  /**
   * subject identifier
   *
   * @generated from field: string subject_id = 5;
   */
  subjectId = "";

  /**
   * collect trace information
   *
   * @generated from field: bool trace = 7;
   */
  trace = false;

  constructor(data?: PartialMessage<CheckRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v3.CheckRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "relation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "subject_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "subject_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "trace", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckRequest {
    return new CheckRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckRequest {
    return new CheckRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckRequest {
    return new CheckRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckRequest | PlainMessage<CheckRequest> | undefined, b: CheckRequest | PlainMessage<CheckRequest> | undefined): boolean {
    return proto3.util.equals(CheckRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v3.CheckResponse
 */
export class CheckResponse extends Message<CheckResponse> {
  /**
   * check result
   *
   * @generated from field: bool check = 1;
   */
  check = false;

  /**
   * trace information
   *
   * @generated from field: repeated string trace = 2;
   */
  trace: string[] = [];

  constructor(data?: PartialMessage<CheckResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v3.CheckResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "trace", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckResponse {
    return new CheckResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckResponse {
    return new CheckResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckResponse {
    return new CheckResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckResponse | PlainMessage<CheckResponse> | undefined, b: CheckResponse | PlainMessage<CheckResponse> | undefined): boolean {
    return proto3.util.equals(CheckResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v3.CheckPermissionRequest
 */
export class CheckPermissionRequest extends Message<CheckPermissionRequest> {
  /**
   * object type
   *
   * @generated from field: string object_type = 1;
   */
  objectType = "";

  /**
   * object identifier
   *
   * @generated from field: string object_id = 2;
   */
  objectId = "";

  /**
   * permission name
   *
   * @generated from field: string permission = 3;
   */
  permission = "";

  /**
   * subject type
   *
   * @generated from field: string subject_type = 4;
   */
  subjectType = "";

  /**
   * subject identifier
   *
   * @generated from field: string subject_id = 5;
   */
  subjectId = "";

  /**
   * collect trace information
   *
   * @generated from field: bool trace = 7;
   */
  trace = false;

  constructor(data?: PartialMessage<CheckPermissionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v3.CheckPermissionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "permission", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "subject_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "subject_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "trace", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckPermissionRequest {
    return new CheckPermissionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckPermissionRequest {
    return new CheckPermissionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckPermissionRequest {
    return new CheckPermissionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckPermissionRequest | PlainMessage<CheckPermissionRequest> | undefined, b: CheckPermissionRequest | PlainMessage<CheckPermissionRequest> | undefined): boolean {
    return proto3.util.equals(CheckPermissionRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v3.CheckPermissionResponse
 */
export class CheckPermissionResponse extends Message<CheckPermissionResponse> {
  /**
   * check result
   *
   * @generated from field: bool check = 1;
   */
  check = false;

  /**
   * trace information
   *
   * @generated from field: repeated string trace = 2;
   */
  trace: string[] = [];

  constructor(data?: PartialMessage<CheckPermissionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v3.CheckPermissionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "trace", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckPermissionResponse {
    return new CheckPermissionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckPermissionResponse {
    return new CheckPermissionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckPermissionResponse {
    return new CheckPermissionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckPermissionResponse | PlainMessage<CheckPermissionResponse> | undefined, b: CheckPermissionResponse | PlainMessage<CheckPermissionResponse> | undefined): boolean {
    return proto3.util.equals(CheckPermissionResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v3.CheckRelationRequest
 */
export class CheckRelationRequest extends Message<CheckRelationRequest> {
  /**
   * object type
   *
   * @generated from field: string object_type = 1;
   */
  objectType = "";

  /**
   * object identifier
   *
   * @generated from field: string object_id = 2;
   */
  objectId = "";

  /**
   * relation name
   *
   * @generated from field: string relation = 3;
   */
  relation = "";

  /**
   * subject type
   *
   * @generated from field: string subject_type = 4;
   */
  subjectType = "";

  /**
   * subject identifier
   *
   * @generated from field: string subject_id = 5;
   */
  subjectId = "";

  /**
   * collect trace information
   *
   * @generated from field: bool trace = 7;
   */
  trace = false;

  constructor(data?: PartialMessage<CheckRelationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v3.CheckRelationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "relation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "subject_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "subject_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "trace", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckRelationRequest {
    return new CheckRelationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckRelationRequest {
    return new CheckRelationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckRelationRequest {
    return new CheckRelationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckRelationRequest | PlainMessage<CheckRelationRequest> | undefined, b: CheckRelationRequest | PlainMessage<CheckRelationRequest> | undefined): boolean {
    return proto3.util.equals(CheckRelationRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v3.CheckRelationResponse
 */
export class CheckRelationResponse extends Message<CheckRelationResponse> {
  /**
   * check result
   *
   * @generated from field: bool check = 1;
   */
  check = false;

  /**
   * trace information
   *
   * @generated from field: repeated string trace = 2;
   */
  trace: string[] = [];

  constructor(data?: PartialMessage<CheckRelationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v3.CheckRelationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "trace", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckRelationResponse {
    return new CheckRelationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckRelationResponse {
    return new CheckRelationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckRelationResponse {
    return new CheckRelationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckRelationResponse | PlainMessage<CheckRelationResponse> | undefined, b: CheckRelationResponse | PlainMessage<CheckRelationResponse> | undefined): boolean {
    return proto3.util.equals(CheckRelationResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v3.GetGraphRequest
 */
export class GetGraphRequest extends Message<GetGraphRequest> {
  /**
   * anchor type
   *
   * @generated from field: string anchor_type = 1;
   */
  anchorType = "";

  /**
   * anchor identifier
   *
   * @generated from field: string anchor_id = 2;
   */
  anchorId = "";

  /**
   * object type
   *
   * @generated from field: string object_type = 3;
   */
  objectType = "";

  /**
   * object identifier
   *
   * @generated from field: string object_id = 4;
   */
  objectId = "";

  /**
   * relation name
   *
   * @generated from field: string relation = 5;
   */
  relation = "";

  /**
   * subject type
   *
   * @generated from field: string subject_type = 6;
   */
  subjectType = "";

  /**
   * subject identifier
   *
   * @generated from field: string subject_id = 7;
   */
  subjectId = "";

  /**
   * subject relation
   *
   * @generated from field: string subject_relation = 8;
   */
  subjectRelation = "";

  constructor(data?: PartialMessage<GetGraphRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v3.GetGraphRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "anchor_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "anchor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "relation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "subject_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "subject_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "subject_relation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGraphRequest {
    return new GetGraphRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGraphRequest {
    return new GetGraphRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGraphRequest {
    return new GetGraphRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGraphRequest | PlainMessage<GetGraphRequest> | undefined, b: GetGraphRequest | PlainMessage<GetGraphRequest> | undefined): boolean {
    return proto3.util.equals(GetGraphRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.reader.v3.GetGraphResponse
 */
export class GetGraphResponse extends Message<GetGraphResponse> {
  /**
   * dependency graph
   *
   * @generated from field: repeated aserto.directory.common.v3.ObjectDependency results = 1;
   */
  results: ObjectDependency[] = [];

  constructor(data?: PartialMessage<GetGraphResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.reader.v3.GetGraphResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: ObjectDependency, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGraphResponse {
    return new GetGraphResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGraphResponse {
    return new GetGraphResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGraphResponse {
    return new GetGraphResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetGraphResponse | PlainMessage<GetGraphResponse> | undefined, b: GetGraphResponse | PlainMessage<GetGraphResponse> | undefined): boolean {
    return proto3.util.equals(GetGraphResponse, a, b);
  }
}

