// @generated by protoc-gen-es v2.2.2 with parameter "target=ts+js"
// @generated from file aserto/directory/reader/v3/reader.proto (package aserto.directory.reader.v3, syntax proto3)
/* eslint-disable */

import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_protoc_gen_openapiv2_options_annotations } from "../../../../protoc-gen-openapiv2/options/annotations_pb";
import { file_google_api_annotations } from "../../../../google/api/annotations_pb";
import { file_google_api_field_behavior } from "../../../../google/api/field_behavior_pb";
import { file_google_protobuf_struct } from "@bufbuild/protobuf/wkt";
import { file_buf_validate_validate } from "../../../../buf/validate/validate_pb";
import { file_aserto_directory_common_v3_common } from "../../common/v3/common_pb";

/**
 * Describes the file aserto/directory/reader/v3/reader.proto.
 */
export const file_aserto_directory_reader_v3_reader = /*@__PURE__*/
  fileDesc("", [file_protoc_gen_openapiv2_options_annotations, file_google_api_annotations, file_google_api_field_behavior, file_google_protobuf_struct, file_buf_validate_validate, file_aserto_directory_common_v3_common]);

/**
 * Describes the message aserto.directory.reader.v3.GetObjectRequest.
 * Use `create(GetObjectRequestSchema)` to create a new message.
 */
export const GetObjectRequestSchema = /*@__PURE__*/
  messageDesc(file_aserto_directory_reader_v3_reader, 0);

/**
 * Describes the message aserto.directory.reader.v3.GetObjectResponse.
 * Use `create(GetObjectResponseSchema)` to create a new message.
 */
export const GetObjectResponseSchema = /*@__PURE__*/
  messageDesc(file_aserto_directory_reader_v3_reader, 1);

/**
 * Describes the message aserto.directory.reader.v3.GetObjectManyRequest.
 * Use `create(GetObjectManyRequestSchema)` to create a new message.
 */
export const GetObjectManyRequestSchema = /*@__PURE__*/
  messageDesc(file_aserto_directory_reader_v3_reader, 2);

/**
 * Describes the message aserto.directory.reader.v3.GetObjectManyResponse.
 * Use `create(GetObjectManyResponseSchema)` to create a new message.
 */
export const GetObjectManyResponseSchema = /*@__PURE__*/
  messageDesc(file_aserto_directory_reader_v3_reader, 3);

/**
 * Describes the message aserto.directory.reader.v3.GetObjectsRequest.
 * Use `create(GetObjectsRequestSchema)` to create a new message.
 */
export const GetObjectsRequestSchema = /*@__PURE__*/
  messageDesc(file_aserto_directory_reader_v3_reader, 4);

/**
 * Describes the message aserto.directory.reader.v3.GetObjectsResponse.
 * Use `create(GetObjectsResponseSchema)` to create a new message.
 */
export const GetObjectsResponseSchema = /*@__PURE__*/
  messageDesc(file_aserto_directory_reader_v3_reader, 5);

/**
 * Describes the message aserto.directory.reader.v3.GetRelationRequest.
 * Use `create(GetRelationRequestSchema)` to create a new message.
 */
export const GetRelationRequestSchema = /*@__PURE__*/
  messageDesc(file_aserto_directory_reader_v3_reader, 6);

/**
 * Describes the message aserto.directory.reader.v3.GetRelationResponse.
 * Use `create(GetRelationResponseSchema)` to create a new message.
 */
export const GetRelationResponseSchema = /*@__PURE__*/
  messageDesc(file_aserto_directory_reader_v3_reader, 7);

/**
 * Describes the message aserto.directory.reader.v3.GetRelationsRequest.
 * Use `create(GetRelationsRequestSchema)` to create a new message.
 */
export const GetRelationsRequestSchema = /*@__PURE__*/
  messageDesc(file_aserto_directory_reader_v3_reader, 8);

/**
 * Describes the message aserto.directory.reader.v3.GetRelationsResponse.
 * Use `create(GetRelationsResponseSchema)` to create a new message.
 */
export const GetRelationsResponseSchema = /*@__PURE__*/
  messageDesc(file_aserto_directory_reader_v3_reader, 9);

/**
 * Describes the message aserto.directory.reader.v3.CheckRequest.
 * Use `create(CheckRequestSchema)` to create a new message.
 */
export const CheckRequestSchema = /*@__PURE__*/
  messageDesc(file_aserto_directory_reader_v3_reader, 10);

/**
 * Describes the message aserto.directory.reader.v3.CheckResponse.
 * Use `create(CheckResponseSchema)` to create a new message.
 */
export const CheckResponseSchema = /*@__PURE__*/
  messageDesc(file_aserto_directory_reader_v3_reader, 11);

/**
 * Describes the message aserto.directory.reader.v3.CheckPermissionRequest.
 * Use `create(CheckPermissionRequestSchema)` to create a new message.
 */
export const CheckPermissionRequestSchema = /*@__PURE__*/
  messageDesc(file_aserto_directory_reader_v3_reader, 12);

/**
 * Describes the message aserto.directory.reader.v3.CheckPermissionResponse.
 * Use `create(CheckPermissionResponseSchema)` to create a new message.
 */
export const CheckPermissionResponseSchema = /*@__PURE__*/
  messageDesc(file_aserto_directory_reader_v3_reader, 13);

/**
 * Describes the message aserto.directory.reader.v3.CheckRelationRequest.
 * Use `create(CheckRelationRequestSchema)` to create a new message.
 */
export const CheckRelationRequestSchema = /*@__PURE__*/
  messageDesc(file_aserto_directory_reader_v3_reader, 14);

/**
 * Describes the message aserto.directory.reader.v3.CheckRelationResponse.
 * Use `create(CheckRelationResponseSchema)` to create a new message.
 */
export const CheckRelationResponseSchema = /*@__PURE__*/
  messageDesc(file_aserto_directory_reader_v3_reader, 15);

/**
 * Describes the message aserto.directory.reader.v3.GetGraphRequest.
 * Use `create(GetGraphRequestSchema)` to create a new message.
 */
export const GetGraphRequestSchema = /*@__PURE__*/
  messageDesc(file_aserto_directory_reader_v3_reader, 16);

/**
 * Describes the message aserto.directory.reader.v3.GetGraphResponse.
 * Use `create(GetGraphResponseSchema)` to create a new message.
 */
export const GetGraphResponseSchema = /*@__PURE__*/
  messageDesc(file_aserto_directory_reader_v3_reader, 17);

/**
 * @generated from service aserto.directory.reader.v3.Reader
 */
export const Reader = /*@__PURE__*/
  serviceDesc(file_aserto_directory_reader_v3_reader, 0);

