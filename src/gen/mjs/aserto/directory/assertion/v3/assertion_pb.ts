// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file aserto/directory/assertion/v3/assertion.proto (package aserto.directory.assertion.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Empty, Message, proto3 } from "@bufbuild/protobuf";
import { PaginationRequest, PaginationResponse } from "../../common/v3/common_pb.js";
import { CheckPermissionRequest, CheckRelationRequest, CheckRequest } from "../../reader/v3/reader_pb.js";

/**
 * @generated from message aserto.directory.assertion.v3.GetAssertionRequest
 */
export class GetAssertionRequest extends Message<GetAssertionRequest> {
  /**
   * assertion identifier
   *
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<GetAssertionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.assertion.v3.GetAssertionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAssertionRequest {
    return new GetAssertionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAssertionRequest {
    return new GetAssertionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAssertionRequest {
    return new GetAssertionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAssertionRequest | PlainMessage<GetAssertionRequest> | undefined, b: GetAssertionRequest | PlainMessage<GetAssertionRequest> | undefined): boolean {
    return proto3.util.equals(GetAssertionRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.assertion.v3.GetAssertionResponse
 */
export class GetAssertionResponse extends Message<GetAssertionResponse> {
  /**
   * @generated from field: aserto.directory.assertion.v3.Assert result = 1;
   */
  result?: Assert;

  constructor(data?: PartialMessage<GetAssertionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.assertion.v3.GetAssertionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Assert },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAssertionResponse {
    return new GetAssertionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAssertionResponse {
    return new GetAssertionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAssertionResponse {
    return new GetAssertionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAssertionResponse | PlainMessage<GetAssertionResponse> | undefined, b: GetAssertionResponse | PlainMessage<GetAssertionResponse> | undefined): boolean {
    return proto3.util.equals(GetAssertionResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.assertion.v3.ListAssertionsRequest
 */
export class ListAssertionsRequest extends Message<ListAssertionsRequest> {
  /**
   * pagination request
   *
   * @generated from field: aserto.directory.common.v3.PaginationRequest page = 1;
   */
  page?: PaginationRequest;

  constructor(data?: PartialMessage<ListAssertionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.assertion.v3.ListAssertionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "message", T: PaginationRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAssertionsRequest {
    return new ListAssertionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAssertionsRequest {
    return new ListAssertionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAssertionsRequest {
    return new ListAssertionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAssertionsRequest | PlainMessage<ListAssertionsRequest> | undefined, b: ListAssertionsRequest | PlainMessage<ListAssertionsRequest> | undefined): boolean {
    return proto3.util.equals(ListAssertionsRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.assertion.v3.ListAssertionsResponse
 */
export class ListAssertionsResponse extends Message<ListAssertionsResponse> {
  /**
   * @generated from field: repeated aserto.directory.assertion.v3.Assert results = 1;
   */
  results: Assert[] = [];

  /**
   * @generated from field: aserto.directory.common.v3.PaginationResponse page = 2;
   */
  page?: PaginationResponse;

  constructor(data?: PartialMessage<ListAssertionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.assertion.v3.ListAssertionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: Assert, repeated: true },
    { no: 2, name: "page", kind: "message", T: PaginationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAssertionsResponse {
    return new ListAssertionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAssertionsResponse {
    return new ListAssertionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAssertionsResponse {
    return new ListAssertionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAssertionsResponse | PlainMessage<ListAssertionsResponse> | undefined, b: ListAssertionsResponse | PlainMessage<ListAssertionsResponse> | undefined): boolean {
    return proto3.util.equals(ListAssertionsResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.assertion.v3.SetAssertionRequest
 */
export class SetAssertionRequest extends Message<SetAssertionRequest> {
  /**
   * @generated from field: aserto.directory.assertion.v3.Assert assert = 1;
   */
  assert?: Assert;

  constructor(data?: PartialMessage<SetAssertionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.assertion.v3.SetAssertionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "assert", kind: "message", T: Assert },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetAssertionRequest {
    return new SetAssertionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetAssertionRequest {
    return new SetAssertionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetAssertionRequest {
    return new SetAssertionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetAssertionRequest | PlainMessage<SetAssertionRequest> | undefined, b: SetAssertionRequest | PlainMessage<SetAssertionRequest> | undefined): boolean {
    return proto3.util.equals(SetAssertionRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.assertion.v3.SetAssertionResponse
 */
export class SetAssertionResponse extends Message<SetAssertionResponse> {
  /**
   * @generated from field: aserto.directory.assertion.v3.Assert result = 1;
   */
  result?: Assert;

  constructor(data?: PartialMessage<SetAssertionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.assertion.v3.SetAssertionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Assert },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetAssertionResponse {
    return new SetAssertionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetAssertionResponse {
    return new SetAssertionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetAssertionResponse {
    return new SetAssertionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetAssertionResponse | PlainMessage<SetAssertionResponse> | undefined, b: SetAssertionResponse | PlainMessage<SetAssertionResponse> | undefined): boolean {
    return proto3.util.equals(SetAssertionResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.assertion.v3.DeleteAssertionRequest
 */
export class DeleteAssertionRequest extends Message<DeleteAssertionRequest> {
  /**
   * assertion identifier
   *
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<DeleteAssertionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.assertion.v3.DeleteAssertionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAssertionRequest {
    return new DeleteAssertionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAssertionRequest {
    return new DeleteAssertionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAssertionRequest {
    return new DeleteAssertionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAssertionRequest | PlainMessage<DeleteAssertionRequest> | undefined, b: DeleteAssertionRequest | PlainMessage<DeleteAssertionRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAssertionRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.assertion.v3.DeleteAssertionResponse
 */
export class DeleteAssertionResponse extends Message<DeleteAssertionResponse> {
  /**
   * empty result
   *
   * @generated from field: google.protobuf.Empty result = 1;
   */
  result?: Empty;

  constructor(data?: PartialMessage<DeleteAssertionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.assertion.v3.DeleteAssertionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Empty },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAssertionResponse {
    return new DeleteAssertionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAssertionResponse {
    return new DeleteAssertionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAssertionResponse {
    return new DeleteAssertionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAssertionResponse | PlainMessage<DeleteAssertionResponse> | undefined, b: DeleteAssertionResponse | PlainMessage<DeleteAssertionResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAssertionResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.assertion.v3.Assert
 */
export class Assert extends Message<Assert> {
  /**
   * assertion identifier
   *
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  /**
   * expected outcome of assertion
   *
   * @generated from field: bool expected = 2;
   */
  expected = false;

  /**
   * assertion request
   *
   * @generated from oneof aserto.directory.assertion.v3.Assert.msg
   */
  msg: {
    /**
     * @generated from field: aserto.directory.reader.v3.CheckRequest check = 3;
     */
    value: CheckRequest;
    case: "check";
  } | {
    /**
     * @generated from field: aserto.directory.reader.v3.CheckRelationRequest check_relation = 4;
     */
    value: CheckRelationRequest;
    case: "checkRelation";
  } | {
    /**
     * @generated from field: aserto.directory.reader.v3.CheckPermissionRequest check_permission = 5;
     */
    value: CheckPermissionRequest;
    case: "checkPermission";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Assert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.assertion.v3.Assert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "expected", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "check", kind: "message", T: CheckRequest, oneof: "msg" },
    { no: 4, name: "check_relation", kind: "message", T: CheckRelationRequest, oneof: "msg" },
    { no: 5, name: "check_permission", kind: "message", T: CheckPermissionRequest, oneof: "msg" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Assert {
    return new Assert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Assert {
    return new Assert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Assert {
    return new Assert().fromJsonString(jsonString, options);
  }

  static equals(a: Assert | PlainMessage<Assert> | undefined, b: Assert | PlainMessage<Assert> | undefined): boolean {
    return proto3.util.equals(Assert, a, b);
  }
}

