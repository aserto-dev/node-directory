// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file aserto/directory/writer/v3/writer.proto (package aserto.directory.writer.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Empty, Message, proto3 } from "@bufbuild/protobuf";
import { Object$, Relation } from "../../common/v3/common_pb.js";

/**
 * @generated from message aserto.directory.writer.v3.SetObjectRequest
 */
export class SetObjectRequest extends Message<SetObjectRequest> {
  /**
   * object instance
   *
   * @generated from field: aserto.directory.common.v3.Object object = 1;
   */
  object?: Object$;

  constructor(data?: PartialMessage<SetObjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v3.SetObjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: Object$ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetObjectRequest {
    return new SetObjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetObjectRequest {
    return new SetObjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetObjectRequest {
    return new SetObjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetObjectRequest | PlainMessage<SetObjectRequest> | undefined, b: SetObjectRequest | PlainMessage<SetObjectRequest> | undefined): boolean {
    return proto3.util.equals(SetObjectRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v3.SetObjectResponse
 */
export class SetObjectResponse extends Message<SetObjectResponse> {
  /**
   * object instance
   *
   * @generated from field: aserto.directory.common.v3.Object result = 1;
   */
  result?: Object$;

  constructor(data?: PartialMessage<SetObjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v3.SetObjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Object$ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetObjectResponse {
    return new SetObjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetObjectResponse {
    return new SetObjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetObjectResponse {
    return new SetObjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetObjectResponse | PlainMessage<SetObjectResponse> | undefined, b: SetObjectResponse | PlainMessage<SetObjectResponse> | undefined): boolean {
    return proto3.util.equals(SetObjectResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v3.DeleteObjectRequest
 */
export class DeleteObjectRequest extends Message<DeleteObjectRequest> {
  /**
   * object type
   *
   * @generated from field: string object_type = 1;
   */
  objectType = "";

  /**
   * object identifier
   *
   * @generated from field: string object_id = 2;
   */
  objectId = "";

  /**
   * delete object relations, both object and subject relations.
   *
   * @generated from field: bool with_relations = 3;
   */
  withRelations = false;

  constructor(data?: PartialMessage<DeleteObjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v3.DeleteObjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "with_relations", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteObjectRequest {
    return new DeleteObjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteObjectRequest {
    return new DeleteObjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteObjectRequest {
    return new DeleteObjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteObjectRequest | PlainMessage<DeleteObjectRequest> | undefined, b: DeleteObjectRequest | PlainMessage<DeleteObjectRequest> | undefined): boolean {
    return proto3.util.equals(DeleteObjectRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v3.DeleteObjectResponse
 */
export class DeleteObjectResponse extends Message<DeleteObjectResponse> {
  /**
   * empty result
   *
   * @generated from field: google.protobuf.Empty result = 1;
   */
  result?: Empty;

  constructor(data?: PartialMessage<DeleteObjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v3.DeleteObjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Empty },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteObjectResponse {
    return new DeleteObjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteObjectResponse {
    return new DeleteObjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteObjectResponse {
    return new DeleteObjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteObjectResponse | PlainMessage<DeleteObjectResponse> | undefined, b: DeleteObjectResponse | PlainMessage<DeleteObjectResponse> | undefined): boolean {
    return proto3.util.equals(DeleteObjectResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v3.SetRelationRequest
 */
export class SetRelationRequest extends Message<SetRelationRequest> {
  /**
   * relation instance
   *
   * @generated from field: aserto.directory.common.v3.Relation relation = 1;
   */
  relation?: Relation;

  constructor(data?: PartialMessage<SetRelationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v3.SetRelationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relation", kind: "message", T: Relation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetRelationRequest {
    return new SetRelationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetRelationRequest {
    return new SetRelationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetRelationRequest {
    return new SetRelationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetRelationRequest | PlainMessage<SetRelationRequest> | undefined, b: SetRelationRequest | PlainMessage<SetRelationRequest> | undefined): boolean {
    return proto3.util.equals(SetRelationRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v3.SetRelationResponse
 */
export class SetRelationResponse extends Message<SetRelationResponse> {
  /**
   * relation instance
   *
   * @generated from field: aserto.directory.common.v3.Relation result = 1;
   */
  result?: Relation;

  constructor(data?: PartialMessage<SetRelationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v3.SetRelationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Relation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetRelationResponse {
    return new SetRelationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetRelationResponse {
    return new SetRelationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetRelationResponse {
    return new SetRelationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetRelationResponse | PlainMessage<SetRelationResponse> | undefined, b: SetRelationResponse | PlainMessage<SetRelationResponse> | undefined): boolean {
    return proto3.util.equals(SetRelationResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v3.DeleteRelationRequest
 */
export class DeleteRelationRequest extends Message<DeleteRelationRequest> {
  /**
   * object type
   *
   * @generated from field: string object_type = 1;
   */
  objectType = "";

  /**
   * object identifier
   *
   * @generated from field: string object_id = 2;
   */
  objectId = "";

  /**
   * object relation name
   *
   * @generated from field: string relation = 3;
   */
  relation = "";

  /**
   * subject type
   *
   * @generated from field: string subject_type = 4;
   */
  subjectType = "";

  /**
   * subject identifier
   *
   * @generated from field: string subject_id = 5;
   */
  subjectId = "";

  /**
   * optional subject relation name
   *
   * @generated from field: string subject_relation = 6;
   */
  subjectRelation = "";

  constructor(data?: PartialMessage<DeleteRelationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v3.DeleteRelationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "relation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "subject_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "subject_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "subject_relation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRelationRequest {
    return new DeleteRelationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRelationRequest {
    return new DeleteRelationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRelationRequest {
    return new DeleteRelationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRelationRequest | PlainMessage<DeleteRelationRequest> | undefined, b: DeleteRelationRequest | PlainMessage<DeleteRelationRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRelationRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v3.DeleteRelationResponse
 */
export class DeleteRelationResponse extends Message<DeleteRelationResponse> {
  /**
   * empty result
   *
   * @generated from field: google.protobuf.Empty result = 1;
   */
  result?: Empty;

  constructor(data?: PartialMessage<DeleteRelationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v3.DeleteRelationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Empty },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRelationResponse {
    return new DeleteRelationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRelationResponse {
    return new DeleteRelationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRelationResponse {
    return new DeleteRelationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRelationResponse | PlainMessage<DeleteRelationResponse> | undefined, b: DeleteRelationResponse | PlainMessage<DeleteRelationResponse> | undefined): boolean {
    return proto3.util.equals(DeleteRelationResponse, a, b);
  }
}

