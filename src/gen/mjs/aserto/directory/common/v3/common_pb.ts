// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file aserto/directory/common/v3/common.proto (package aserto.directory.common.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message aserto.directory.common.v3.Object
 */
export class Object$ extends Message<Object$> {
  /**
   * object type name
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * external object identifier (cs-string, no spaces or tabs)
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * display name object
   *
   * @generated from field: string display_name = 3;
   */
  displayName = "";

  /**
   * property bag
   *
   * @generated from field: google.protobuf.Struct properties = 4;
   */
  properties?: Struct;

  /**
   * created at timestamp (UTC)
   *
   * @generated from field: google.protobuf.Timestamp created_at = 20;
   */
  createdAt?: Timestamp;

  /**
   * last updated timestamp (UTC)
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 21;
   */
  updatedAt?: Timestamp;

  /**
   * object instance etag
   *
   * @generated from field: string etag = 23;
   */
  etag = "";

  constructor(data?: PartialMessage<Object$>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.common.v3.Object";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "properties", kind: "message", T: Struct },
    { no: 20, name: "created_at", kind: "message", T: Timestamp },
    { no: 21, name: "updated_at", kind: "message", T: Timestamp },
    { no: 23, name: "etag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object$ {
    return new Object$().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object$ {
    return new Object$().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object$ {
    return new Object$().fromJsonString(jsonString, options);
  }

  static equals(a: Object$ | PlainMessage<Object$> | undefined, b: Object$ | PlainMessage<Object$> | undefined): boolean {
    return proto3.util.equals(Object$, a, b);
  }
}

/**
 * @generated from message aserto.directory.common.v3.Relation
 */
export class Relation extends Message<Relation> {
  /**
   * object type
   *
   * @generated from field: string object_type = 1;
   */
  objectType = "";

  /**
   * object identifier
   *
   * @generated from field: string object_id = 2;
   */
  objectId = "";

  /**
   * object relation name
   *
   * @generated from field: string relation = 3;
   */
  relation = "";

  /**
   * subject type
   *
   * @generated from field: string subject_type = 4;
   */
  subjectType = "";

  /**
   * subject identifier
   *
   * @generated from field: string subject_id = 5;
   */
  subjectId = "";

  /**
   * optional subject relation name
   *
   * @generated from field: string subject_relation = 6;
   */
  subjectRelation = "";

  /**
   * created at timestamp (UTC)
   *
   * @generated from field: google.protobuf.Timestamp created_at = 20;
   */
  createdAt?: Timestamp;

  /**
   * last updated timestamp (UTC)
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 21;
   */
  updatedAt?: Timestamp;

  /**
   * object instance etag
   *
   * @generated from field: string etag = 23;
   */
  etag = "";

  constructor(data?: PartialMessage<Relation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.common.v3.Relation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "relation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "subject_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "subject_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "subject_relation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "created_at", kind: "message", T: Timestamp },
    { no: 21, name: "updated_at", kind: "message", T: Timestamp },
    { no: 23, name: "etag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Relation {
    return new Relation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Relation {
    return new Relation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Relation {
    return new Relation().fromJsonString(jsonString, options);
  }

  static equals(a: Relation | PlainMessage<Relation> | undefined, b: Relation | PlainMessage<Relation> | undefined): boolean {
    return proto3.util.equals(Relation, a, b);
  }
}

/**
 * @generated from message aserto.directory.common.v3.ObjectDependency
 */
export class ObjectDependency extends Message<ObjectDependency> {
  /**
   * object type
   *
   * @generated from field: string object_type = 1;
   */
  objectType = "";

  /**
   * object identifier
   *
   * @generated from field: string object_id = 2;
   */
  objectId = "";

  /**
   * object relation name
   *
   * @generated from field: string relation = 3;
   */
  relation = "";

  /**
   * subject type
   *
   * @generated from field: string subject_type = 4;
   */
  subjectType = "";

  /**
   * subject identifier
   *
   * @generated from field: string subject_id = 5;
   */
  subjectId = "";

  /**
   * optional subject relation name
   *
   * @generated from field: string subject_relation = 6;
   */
  subjectRelation = "";

  /**
   * dependency depth
   *
   * @generated from field: int32 depth = 7;
   */
  depth = 0;

  /**
   * dependency cycle
   *
   * @generated from field: bool is_cycle = 8;
   */
  isCycle = false;

  /**
   * dependency path
   *
   * @generated from field: repeated string path = 9;
   */
  path: string[] = [];

  constructor(data?: PartialMessage<ObjectDependency>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.common.v3.ObjectDependency";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "relation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "subject_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "subject_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "subject_relation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "depth", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "is_cycle", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectDependency {
    return new ObjectDependency().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectDependency {
    return new ObjectDependency().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectDependency {
    return new ObjectDependency().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectDependency | PlainMessage<ObjectDependency> | undefined, b: ObjectDependency | PlainMessage<ObjectDependency> | undefined): boolean {
    return proto3.util.equals(ObjectDependency, a, b);
  }
}

/**
 * Object identifier
 *
 * @generated from message aserto.directory.common.v3.ObjectIdentifier
 */
export class ObjectIdentifier extends Message<ObjectIdentifier> {
  /**
   * object type (lc-string)
   *
   * @generated from field: string object_type = 1;
   */
  objectType = "";

  /**
   * object identifier (cs-string)
   *
   * @generated from field: string object_id = 2;
   */
  objectId = "";

  constructor(data?: PartialMessage<ObjectIdentifier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.common.v3.ObjectIdentifier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectIdentifier {
    return new ObjectIdentifier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectIdentifier {
    return new ObjectIdentifier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectIdentifier {
    return new ObjectIdentifier().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectIdentifier | PlainMessage<ObjectIdentifier> | undefined, b: ObjectIdentifier | PlainMessage<ObjectIdentifier> | undefined): boolean {
    return proto3.util.equals(ObjectIdentifier, a, b);
  }
}

/**
 * Pagination request
 *
 * @generated from message aserto.directory.common.v3.PaginationRequest
 */
export class PaginationRequest extends Message<PaginationRequest> {
  /**
   * requested page size, valid value between 1-100 rows (default 100)
   *
   * @generated from field: int32 size = 1;
   */
  size = 0;

  /**
   * pagination start token, default ""
   *
   * @generated from field: string token = 2;
   */
  token = "";

  constructor(data?: PartialMessage<PaginationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.common.v3.PaginationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaginationRequest {
    return new PaginationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaginationRequest {
    return new PaginationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaginationRequest {
    return new PaginationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PaginationRequest | PlainMessage<PaginationRequest> | undefined, b: PaginationRequest | PlainMessage<PaginationRequest> | undefined): boolean {
    return proto3.util.equals(PaginationRequest, a, b);
  }
}

/**
 * Pagination response
 *
 * @generated from message aserto.directory.common.v3.PaginationResponse
 */
export class PaginationResponse extends Message<PaginationResponse> {
  /**
   * next page token, when empty there are no more pages to fetch
   *
   * @generated from field: string next_token = 1;
   */
  nextToken = "";

  constructor(data?: PartialMessage<PaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.common.v3.PaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaginationResponse {
    return new PaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaginationResponse {
    return new PaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaginationResponse {
    return new PaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PaginationResponse | PlainMessage<PaginationResponse> | undefined, b: PaginationResponse | PlainMessage<PaginationResponse> | undefined): boolean {
    return proto3.util.equals(PaginationResponse, a, b);
  }
}

/**
 * Object type
 *
 * @generated from message aserto.directory.common.v3.ObjectType
 */
export class ObjectType extends Message<ObjectType> {
  /**
   * object type name (lc-string)
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * relations associated to object type
   *
   * @generated from field: repeated string relations = 2;
   */
  relations: string[] = [];

  /**
   * permissions associated to object type
   *
   * @generated from field: repeated string permissions = 3;
   */
  permissions: string[] = [];

  constructor(data?: PartialMessage<ObjectType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.common.v3.ObjectType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "relations", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "permissions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectType {
    return new ObjectType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectType {
    return new ObjectType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectType {
    return new ObjectType().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectType | PlainMessage<ObjectType> | undefined, b: ObjectType | PlainMessage<ObjectType> | undefined): boolean {
    return proto3.util.equals(ObjectType, a, b);
  }
}

