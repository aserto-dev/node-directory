// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file aserto/directory/importer/v3/importer.proto (package aserto.directory.importer.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Object$, Relation } from "../../common/v3/common_pb.js";

/**
 * @generated from enum aserto.directory.importer.v3.Opcode
 */
export enum Opcode {
  /**
   * @generated from enum value: OPCODE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: OPCODE_SET = 1;
   */
  SET = 1,

  /**
   * @generated from enum value: OPCODE_DELETE = 2;
   */
  DELETE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Opcode)
proto3.util.setEnumType(Opcode, "aserto.directory.importer.v3.Opcode", [
  { no: 0, name: "OPCODE_UNKNOWN" },
  { no: 1, name: "OPCODE_SET" },
  { no: 2, name: "OPCODE_DELETE" },
]);

/**
 * @generated from message aserto.directory.importer.v3.ImportRequest
 */
export class ImportRequest extends Message<ImportRequest> {
  /**
   * operation Opcode enum value
   *
   * @generated from field: aserto.directory.importer.v3.Opcode op_code = 1;
   */
  opCode = Opcode.UNKNOWN;

  /**
   * @generated from oneof aserto.directory.importer.v3.ImportRequest.msg
   */
  msg: {
    /**
     * object import message
     *
     * @generated from field: aserto.directory.common.v3.Object object = 5;
     */
    value: Object$;
    case: "object";
  } | {
    /**
     * relation import message
     *
     * @generated from field: aserto.directory.common.v3.Relation relation = 6;
     */
    value: Relation;
    case: "relation";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ImportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.importer.v3.ImportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "op_code", kind: "enum", T: proto3.getEnumType(Opcode) },
    { no: 5, name: "object", kind: "message", T: Object$, oneof: "msg" },
    { no: 6, name: "relation", kind: "message", T: Relation, oneof: "msg" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImportRequest {
    return new ImportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImportRequest {
    return new ImportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImportRequest {
    return new ImportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ImportRequest | PlainMessage<ImportRequest> | undefined, b: ImportRequest | PlainMessage<ImportRequest> | undefined): boolean {
    return proto3.util.equals(ImportRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.importer.v3.ImportResponse
 */
export class ImportResponse extends Message<ImportResponse> {
  /**
   * object import counter
   *
   * @generated from field: aserto.directory.importer.v3.ImportCounter object = 1;
   */
  object?: ImportCounter;

  /**
   * relation import counter
   *
   * @generated from field: aserto.directory.importer.v3.ImportCounter relation = 2;
   */
  relation?: ImportCounter;

  constructor(data?: PartialMessage<ImportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.importer.v3.ImportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: ImportCounter },
    { no: 2, name: "relation", kind: "message", T: ImportCounter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImportResponse {
    return new ImportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImportResponse {
    return new ImportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImportResponse {
    return new ImportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ImportResponse | PlainMessage<ImportResponse> | undefined, b: ImportResponse | PlainMessage<ImportResponse> | undefined): boolean {
    return proto3.util.equals(ImportResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.importer.v3.ImportCounter
 */
export class ImportCounter extends Message<ImportCounter> {
  /**
   * number of messages received
   *
   * @generated from field: uint64 recv = 1;
   */
  recv = protoInt64.zero;

  /**
   * number of messages with OPCODE_SET
   *
   * @generated from field: uint64 set = 2;
   */
  set = protoInt64.zero;

  /**
   * number of messages with OPCODE_DELETE
   *
   * @generated from field: uint64 delete = 3;
   */
  delete = protoInt64.zero;

  /**
   * number of messages resulting in error
   *
   * @generated from field: uint64 error = 4;
   */
  error = protoInt64.zero;

  constructor(data?: PartialMessage<ImportCounter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.importer.v3.ImportCounter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "recv", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "set", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "delete", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "error", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImportCounter {
    return new ImportCounter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImportCounter {
    return new ImportCounter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImportCounter {
    return new ImportCounter().fromJsonString(jsonString, options);
  }

  static equals(a: ImportCounter | PlainMessage<ImportCounter> | undefined, b: ImportCounter | PlainMessage<ImportCounter> | undefined): boolean {
    return proto3.util.equals(ImportCounter, a, b);
  }
}

