"use strict";
// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file aserto/directory/schema/v3/tenant.proto (package aserto.directory.schema.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.GuideState = exports.AccountProperties = exports.TenantProperties = exports.TenantKind = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * @generated from enum aserto.directory.schema.v3.TenantKind
 */
var TenantKind;
(function (TenantKind) {
    /**
     * @generated from enum value: TENANT_KIND_UNKNOWN = 0;
     */
    TenantKind[TenantKind["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * @generated from enum value: TENANT_KIND_ORGANIZATION = 1;
     */
    TenantKind[TenantKind["ORGANIZATION"] = 1] = "ORGANIZATION";
    /**
     * personal tenant
     *
     * @generated from enum value: TENANT_KIND_ACCOUNT = 2;
     */
    TenantKind[TenantKind["ACCOUNT"] = 2] = "ACCOUNT";
})(TenantKind = exports.TenantKind || (exports.TenantKind = {}));
// Retrieve enum metadata with: proto3.getEnumType(TenantKind)
protobuf_1.proto3.util.setEnumType(TenantKind, "aserto.directory.schema.v3.TenantKind", [
    { no: 0, name: "TENANT_KIND_UNKNOWN" },
    { no: 1, name: "TENANT_KIND_ORGANIZATION" },
    { no: 2, name: "TENANT_KIND_ACCOUNT" },
]);
/**
 * Properties of a tenant object
 *
 * @generated from message aserto.directory.schema.v3.TenantProperties
 */
class TenantProperties extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The kind of tenant.
         *
         * @generated from field: aserto.directory.schema.v3.TenantKind kind = 1;
         */
        this.kind = TenantKind.UNKNOWN;
        /**
         * Whether or not the v2 directory experience enabled for this tenant.
         *
         * @generated from field: bool directory_v2 = 2;
         */
        this.directoryV2 = false;
        /**
         * If true, the tenant cannot be reverted to the v1 directory experience.
         *
         * @generated from field: bool directory_v2_only = 3;
         */
        this.directoryV2Only = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TenantProperties().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TenantProperties().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TenantProperties().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TenantProperties, a, b);
    }
}
exports.TenantProperties = TenantProperties;
TenantProperties.runtime = protobuf_1.proto3;
TenantProperties.typeName = "aserto.directory.schema.v3.TenantProperties";
TenantProperties.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "enum", T: protobuf_1.proto3.getEnumType(TenantKind) },
    { no: 2, name: "directory_v2", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "directory_v2_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "account", kind: "message", T: AccountProperties, opt: true },
]);
/**
 * @generated from message aserto.directory.schema.v3.AccountProperties
 */
class AccountProperties extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Maximum number of organizations that can be created in this account.
         * If -1, there is no limit.
         *
         * @generated from field: int32 max_orgs = 1;
         */
        this.maxOrgs = 0;
        /**
         * The default organization for the account
         *
         * @generated from field: string default_tenant_id = 4;
         */
        this.defaultTenantId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AccountProperties().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AccountProperties().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AccountProperties().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AccountProperties, a, b);
    }
}
exports.AccountProperties = AccountProperties;
AccountProperties.runtime = protobuf_1.proto3;
AccountProperties.typeName = "aserto.directory.schema.v3.AccountProperties";
AccountProperties.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "max_orgs", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "getting_started", kind: "message", T: GuideState, opt: true },
    { no: 4, name: "default_tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The state of a user's progress through the console's getting started guide.
 *
 * @generated from message aserto.directory.schema.v3.GuideState
 */
class GuideState extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Whether or not to display the getting started guide.
         *
         * @generated from field: bool show = 1;
         */
        this.show = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GuideState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GuideState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GuideState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GuideState, a, b);
    }
}
exports.GuideState = GuideState;
GuideState.runtime = protobuf_1.proto3;
GuideState.typeName = "aserto.directory.schema.v3.GuideState";
GuideState.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "show", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "steps", kind: "message", T: protobuf_1.Struct },
]);
