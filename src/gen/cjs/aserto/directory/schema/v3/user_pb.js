"use strict";
// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file aserto/directory/schema/v3/user.proto (package aserto.directory.schema.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserProperties = exports.UserStatus = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * @generated from enum aserto.directory.schema.v3.UserStatus
 */
var UserStatus;
(function (UserStatus) {
    /**
     * User status undefined
     *
     * @generated from enum value: USER_STATUS_UNKNOWN = 0;
     */
    UserStatus[UserStatus["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * Staged status, is when the user object is first created, before the activation flow is initiated, or if there is a pending admin action.
     *
     * @generated from enum value: USER_STATUS_STAGED = 1;
     */
    UserStatus[UserStatus["STAGED"] = 1] = "STAGED";
    /**
     * Provisioned status, is when the user object is provisioned, but the user has not provided verification by clicking through the activation email or provided a password.
     *
     * @generated from enum value: USER_STATUS_PROVISIONED = 2;
     */
    UserStatus[UserStatus["PROVISIONED"] = 2] = "PROVISIONED";
    /**
     * Active status, is when:
     *  * An admin adds a user and sets the user password without requiring email verification.
     *  * An admin adds a user, sets the user password, and requires the user to set their password when they first sign-in.
     *  * A user self-registers into a custom app or IDP and email verification is not required.
     *  * An admin explicitly activates the user.
     *
     * @generated from enum value: USER_STATUS_ACTIVE = 3;
     */
    UserStatus[UserStatus["ACTIVE"] = 3] = "ACTIVE";
    /**
     * Recovery status, when the user requests a password reset or an admin initiates one on their behalf.
     *
     * @generated from enum value: USER_STATUS_RECOVERY = 4;
     */
    UserStatus[UserStatus["RECOVERY"] = 4] = "RECOVERY";
    /**
     * Password expired, status when the users' password has expired and the account requires an update to the password before a user is granted access.
     *
     * @generated from enum value: USER_STATUS_PASSWORD_EXPIRED = 5;
     */
    UserStatus[UserStatus["PASSWORD_EXPIRED"] = 5] = "PASSWORD_EXPIRED";
    /**
     * Locked out status, is when the user exceeds the number of login attempts defined in the login policy.
     *
     * @generated from enum value: USER_STATUS_LOCKED_OUT = 6;
     */
    UserStatus[UserStatus["LOCKED_OUT"] = 6] = "LOCKED_OUT";
    /**
     * Suspended status, when an admin explicitly suspends the user account.
     *
     * @generated from enum value: USER_STATUS_SUSPENDED = 7;
     */
    UserStatus[UserStatus["SUSPENDED"] = 7] = "SUSPENDED";
    /**
     * Deprovisioned status, is when an administrator explicitly deactivates or deprovisions/deletes the account.
     *
     * @generated from enum value: USER_STATUS_DEPROVISIONED = 8;
     */
    UserStatus[UserStatus["DEPROVISIONED"] = 8] = "DEPROVISIONED";
})(UserStatus = exports.UserStatus || (exports.UserStatus = {}));
// Retrieve enum metadata with: proto3.getEnumType(UserStatus)
protobuf_1.proto3.util.setEnumType(UserStatus, "aserto.directory.schema.v3.UserStatus", [
    { no: 0, name: "USER_STATUS_UNKNOWN" },
    { no: 1, name: "USER_STATUS_STAGED" },
    { no: 2, name: "USER_STATUS_PROVISIONED" },
    { no: 3, name: "USER_STATUS_ACTIVE" },
    { no: 4, name: "USER_STATUS_RECOVERY" },
    { no: 5, name: "USER_STATUS_PASSWORD_EXPIRED" },
    { no: 6, name: "USER_STATUS_LOCKED_OUT" },
    { no: 7, name: "USER_STATUS_SUSPENDED" },
    { no: 8, name: "USER_STATUS_DEPROVISIONED" },
]);
/**
 * Properties of "user" objects.
 *
 * @generated from message aserto.directory.schema.v3.UserProperties
 */
class UserProperties extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * main email address of user
         *
         * @generated from field: string email = 1;
         */
        this.email = "";
        /**
         * URL to user's picture
         *
         * @generated from field: string picture = 2;
         */
        this.picture = "";
        /**
         * user lifecycle status
         *
         * @generated from field: aserto.directory.schema.v3.UserStatus status = 3;
         */
        this.status = UserStatus.UNKNOWN;
        /**
         * enabled (false prevents the user from accessing anything)
         *
         * @generated from field: bool enabled = 4;
         */
        this.enabled = false;
        /**
         * ID of the IDP connection the user instance is associated with.
         *
         * @generated from field: string connection_id = 5;
         */
        this.connectionId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserProperties().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserProperties().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserProperties().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UserProperties, a, b);
    }
}
exports.UserProperties = UserProperties;
UserProperties.runtime = protobuf_1.proto3;
UserProperties.typeName = "aserto.directory.schema.v3.UserProperties";
UserProperties.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "picture", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "status", kind: "enum", T: protobuf_1.proto3.getEnumType(UserStatus) },
    { no: 4, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
