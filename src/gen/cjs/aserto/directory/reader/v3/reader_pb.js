"use strict";
// @generated by protoc-gen-es v2.2.3 with parameter "target=ts+js"
// @generated from file aserto/directory/reader/v3/reader.proto (package aserto.directory.reader.v3, syntax proto3)
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Reader = exports.GetGraphResponseSchema = exports.GetGraphRequestSchema = exports.CheckRelationResponseSchema = exports.CheckRelationRequestSchema = exports.CheckPermissionResponseSchema = exports.CheckPermissionRequestSchema = exports.ChecksResponseSchema = exports.ChecksRequestSchema = exports.CheckResponseSchema = exports.CheckRequestSchema = exports.GetRelationsResponseSchema = exports.GetRelationsRequestSchema = exports.GetRelationResponseSchema = exports.GetRelationRequestSchema = exports.GetObjectsResponseSchema = exports.GetObjectsRequestSchema = exports.GetObjectManyResponseSchema = exports.GetObjectManyRequestSchema = exports.GetObjectResponseSchema = exports.GetObjectRequestSchema = exports.file_aserto_directory_reader_v3_reader = void 0;
const codegenv1_1 = require("@bufbuild/protobuf/codegenv1");
const annotations_pb_1 = require("../../../../protoc-gen-openapiv2/options/annotations_pb");
const annotations_pb_2 = require("../../../../google/api/annotations_pb");
const field_behavior_pb_1 = require("../../../../google/api/field_behavior_pb");
const wkt_1 = require("@bufbuild/protobuf/wkt");
const validate_pb_1 = require("../../../../buf/validate/validate_pb");
const common_pb_1 = require("../../common/v3/common_pb");
/**
 * Describes the file aserto/directory/reader/v3/reader.proto.
 */
exports.file_aserto_directory_reader_v3_reader = (0, codegenv1_1.fileDesc)("", [annotations_pb_1.file_protoc_gen_openapiv2_options_annotations, annotations_pb_2.file_google_api_annotations, field_behavior_pb_1.file_google_api_field_behavior, wkt_1.file_google_protobuf_struct, validate_pb_1.file_buf_validate_validate, common_pb_1.file_aserto_directory_common_v3_common]);
/**
 * Describes the message aserto.directory.reader.v3.GetObjectRequest.
 * Use `create(GetObjectRequestSchema)` to create a new message.
 */
exports.GetObjectRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_aserto_directory_reader_v3_reader, 0);
/**
 * Describes the message aserto.directory.reader.v3.GetObjectResponse.
 * Use `create(GetObjectResponseSchema)` to create a new message.
 */
exports.GetObjectResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_aserto_directory_reader_v3_reader, 1);
/**
 * Describes the message aserto.directory.reader.v3.GetObjectManyRequest.
 * Use `create(GetObjectManyRequestSchema)` to create a new message.
 */
exports.GetObjectManyRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_aserto_directory_reader_v3_reader, 2);
/**
 * Describes the message aserto.directory.reader.v3.GetObjectManyResponse.
 * Use `create(GetObjectManyResponseSchema)` to create a new message.
 */
exports.GetObjectManyResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_aserto_directory_reader_v3_reader, 3);
/**
 * Describes the message aserto.directory.reader.v3.GetObjectsRequest.
 * Use `create(GetObjectsRequestSchema)` to create a new message.
 */
exports.GetObjectsRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_aserto_directory_reader_v3_reader, 4);
/**
 * Describes the message aserto.directory.reader.v3.GetObjectsResponse.
 * Use `create(GetObjectsResponseSchema)` to create a new message.
 */
exports.GetObjectsResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_aserto_directory_reader_v3_reader, 5);
/**
 * Describes the message aserto.directory.reader.v3.GetRelationRequest.
 * Use `create(GetRelationRequestSchema)` to create a new message.
 */
exports.GetRelationRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_aserto_directory_reader_v3_reader, 6);
/**
 * Describes the message aserto.directory.reader.v3.GetRelationResponse.
 * Use `create(GetRelationResponseSchema)` to create a new message.
 */
exports.GetRelationResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_aserto_directory_reader_v3_reader, 7);
/**
 * Describes the message aserto.directory.reader.v3.GetRelationsRequest.
 * Use `create(GetRelationsRequestSchema)` to create a new message.
 */
exports.GetRelationsRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_aserto_directory_reader_v3_reader, 8);
/**
 * Describes the message aserto.directory.reader.v3.GetRelationsResponse.
 * Use `create(GetRelationsResponseSchema)` to create a new message.
 */
exports.GetRelationsResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_aserto_directory_reader_v3_reader, 9);
/**
 * Describes the message aserto.directory.reader.v3.CheckRequest.
 * Use `create(CheckRequestSchema)` to create a new message.
 */
exports.CheckRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_aserto_directory_reader_v3_reader, 10);
/**
 * Describes the message aserto.directory.reader.v3.CheckResponse.
 * Use `create(CheckResponseSchema)` to create a new message.
 */
exports.CheckResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_aserto_directory_reader_v3_reader, 11);
/**
 * Describes the message aserto.directory.reader.v3.ChecksRequest.
 * Use `create(ChecksRequestSchema)` to create a new message.
 */
exports.ChecksRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_aserto_directory_reader_v3_reader, 12);
/**
 * Describes the message aserto.directory.reader.v3.ChecksResponse.
 * Use `create(ChecksResponseSchema)` to create a new message.
 */
exports.ChecksResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_aserto_directory_reader_v3_reader, 13);
/**
 * Describes the message aserto.directory.reader.v3.CheckPermissionRequest.
 * Use `create(CheckPermissionRequestSchema)` to create a new message.
 */
exports.CheckPermissionRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_aserto_directory_reader_v3_reader, 14);
/**
 * Describes the message aserto.directory.reader.v3.CheckPermissionResponse.
 * Use `create(CheckPermissionResponseSchema)` to create a new message.
 */
exports.CheckPermissionResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_aserto_directory_reader_v3_reader, 15);
/**
 * Describes the message aserto.directory.reader.v3.CheckRelationRequest.
 * Use `create(CheckRelationRequestSchema)` to create a new message.
 */
exports.CheckRelationRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_aserto_directory_reader_v3_reader, 16);
/**
 * Describes the message aserto.directory.reader.v3.CheckRelationResponse.
 * Use `create(CheckRelationResponseSchema)` to create a new message.
 */
exports.CheckRelationResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_aserto_directory_reader_v3_reader, 17);
/**
 * Describes the message aserto.directory.reader.v3.GetGraphRequest.
 * Use `create(GetGraphRequestSchema)` to create a new message.
 */
exports.GetGraphRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_aserto_directory_reader_v3_reader, 18);
/**
 * Describes the message aserto.directory.reader.v3.GetGraphResponse.
 * Use `create(GetGraphResponseSchema)` to create a new message.
 */
exports.GetGraphResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_aserto_directory_reader_v3_reader, 19);
/**
 * @generated from service aserto.directory.reader.v3.Reader
 */
exports.Reader = (0, codegenv1_1.serviceDesc)(exports.file_aserto_directory_reader_v3_reader, 0);
