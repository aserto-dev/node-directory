// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file aserto/directory/writer/v2/writer.proto (package aserto.directory.writer.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Empty, Message, proto3 } from "@bufbuild/protobuf";
import { Object$, ObjectIdentifier, ObjectType, ObjectTypeIdentifier, Permission, PermissionIdentifier, Relation, RelationIdentifier, RelationType, RelationTypeIdentifier } from "../../common/v2/common_pb.js";

/**
 * @generated from message aserto.directory.writer.v2.SetObjectTypeRequest
 */
export class SetObjectTypeRequest extends Message<SetObjectTypeRequest> {
  /**
   *
   *
   * @generated from field: aserto.directory.common.v2.ObjectType object_type = 1;
   */
  objectType?: ObjectType;

  constructor(data?: PartialMessage<SetObjectTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v2.SetObjectTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_type", kind: "message", T: ObjectType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetObjectTypeRequest {
    return new SetObjectTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetObjectTypeRequest {
    return new SetObjectTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetObjectTypeRequest {
    return new SetObjectTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetObjectTypeRequest | PlainMessage<SetObjectTypeRequest> | undefined, b: SetObjectTypeRequest | PlainMessage<SetObjectTypeRequest> | undefined): boolean {
    return proto3.util.equals(SetObjectTypeRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v2.SetObjectTypeResponse
 */
export class SetObjectTypeResponse extends Message<SetObjectTypeResponse> {
  /**
   * object type instance
   *
   * @generated from field: aserto.directory.common.v2.ObjectType result = 1;
   */
  result?: ObjectType;

  constructor(data?: PartialMessage<SetObjectTypeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v2.SetObjectTypeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: ObjectType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetObjectTypeResponse {
    return new SetObjectTypeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetObjectTypeResponse {
    return new SetObjectTypeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetObjectTypeResponse {
    return new SetObjectTypeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetObjectTypeResponse | PlainMessage<SetObjectTypeResponse> | undefined, b: SetObjectTypeResponse | PlainMessage<SetObjectTypeResponse> | undefined): boolean {
    return proto3.util.equals(SetObjectTypeResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v2.DeleteObjectTypeRequest
 */
export class DeleteObjectTypeRequest extends Message<DeleteObjectTypeRequest> {
  /**
   *
   *
   * @generated from field: aserto.directory.common.v2.ObjectTypeIdentifier param = 1;
   */
  param?: ObjectTypeIdentifier;

  constructor(data?: PartialMessage<DeleteObjectTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v2.DeleteObjectTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "param", kind: "message", T: ObjectTypeIdentifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteObjectTypeRequest {
    return new DeleteObjectTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteObjectTypeRequest {
    return new DeleteObjectTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteObjectTypeRequest {
    return new DeleteObjectTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteObjectTypeRequest | PlainMessage<DeleteObjectTypeRequest> | undefined, b: DeleteObjectTypeRequest | PlainMessage<DeleteObjectTypeRequest> | undefined): boolean {
    return proto3.util.equals(DeleteObjectTypeRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v2.DeleteObjectTypeResponse
 */
export class DeleteObjectTypeResponse extends Message<DeleteObjectTypeResponse> {
  /**
   * empty result
   *
   * @generated from field: google.protobuf.Empty result = 1;
   */
  result?: Empty;

  constructor(data?: PartialMessage<DeleteObjectTypeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v2.DeleteObjectTypeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Empty },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteObjectTypeResponse {
    return new DeleteObjectTypeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteObjectTypeResponse {
    return new DeleteObjectTypeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteObjectTypeResponse {
    return new DeleteObjectTypeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteObjectTypeResponse | PlainMessage<DeleteObjectTypeResponse> | undefined, b: DeleteObjectTypeResponse | PlainMessage<DeleteObjectTypeResponse> | undefined): boolean {
    return proto3.util.equals(DeleteObjectTypeResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v2.SetRelationTypeRequest
 */
export class SetRelationTypeRequest extends Message<SetRelationTypeRequest> {
  /**
   *
   *
   * @generated from field: aserto.directory.common.v2.RelationType relation_type = 1;
   */
  relationType?: RelationType;

  constructor(data?: PartialMessage<SetRelationTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v2.SetRelationTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relation_type", kind: "message", T: RelationType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetRelationTypeRequest {
    return new SetRelationTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetRelationTypeRequest {
    return new SetRelationTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetRelationTypeRequest {
    return new SetRelationTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetRelationTypeRequest | PlainMessage<SetRelationTypeRequest> | undefined, b: SetRelationTypeRequest | PlainMessage<SetRelationTypeRequest> | undefined): boolean {
    return proto3.util.equals(SetRelationTypeRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v2.SetRelationTypeResponse
 */
export class SetRelationTypeResponse extends Message<SetRelationTypeResponse> {
  /**
   * relation types instance
   *
   * @generated from field: aserto.directory.common.v2.RelationType result = 1;
   */
  result?: RelationType;

  constructor(data?: PartialMessage<SetRelationTypeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v2.SetRelationTypeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: RelationType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetRelationTypeResponse {
    return new SetRelationTypeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetRelationTypeResponse {
    return new SetRelationTypeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetRelationTypeResponse {
    return new SetRelationTypeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetRelationTypeResponse | PlainMessage<SetRelationTypeResponse> | undefined, b: SetRelationTypeResponse | PlainMessage<SetRelationTypeResponse> | undefined): boolean {
    return proto3.util.equals(SetRelationTypeResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v2.DeleteRelationTypeRequest
 */
export class DeleteRelationTypeRequest extends Message<DeleteRelationTypeRequest> {
  /**
   *
   *
   * @generated from field: aserto.directory.common.v2.RelationTypeIdentifier param = 1;
   */
  param?: RelationTypeIdentifier;

  constructor(data?: PartialMessage<DeleteRelationTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v2.DeleteRelationTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "param", kind: "message", T: RelationTypeIdentifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRelationTypeRequest {
    return new DeleteRelationTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRelationTypeRequest {
    return new DeleteRelationTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRelationTypeRequest {
    return new DeleteRelationTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRelationTypeRequest | PlainMessage<DeleteRelationTypeRequest> | undefined, b: DeleteRelationTypeRequest | PlainMessage<DeleteRelationTypeRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRelationTypeRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v2.DeleteRelationTypeResponse
 */
export class DeleteRelationTypeResponse extends Message<DeleteRelationTypeResponse> {
  /**
   * empty result
   *
   * @generated from field: google.protobuf.Empty result = 1;
   */
  result?: Empty;

  constructor(data?: PartialMessage<DeleteRelationTypeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v2.DeleteRelationTypeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Empty },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRelationTypeResponse {
    return new DeleteRelationTypeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRelationTypeResponse {
    return new DeleteRelationTypeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRelationTypeResponse {
    return new DeleteRelationTypeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRelationTypeResponse | PlainMessage<DeleteRelationTypeResponse> | undefined, b: DeleteRelationTypeResponse | PlainMessage<DeleteRelationTypeResponse> | undefined): boolean {
    return proto3.util.equals(DeleteRelationTypeResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v2.SetPermissionRequest
 */
export class SetPermissionRequest extends Message<SetPermissionRequest> {
  /**
   *
   *
   * @generated from field: aserto.directory.common.v2.Permission permission = 1;
   */
  permission?: Permission;

  constructor(data?: PartialMessage<SetPermissionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v2.SetPermissionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "permission", kind: "message", T: Permission },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetPermissionRequest {
    return new SetPermissionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetPermissionRequest {
    return new SetPermissionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetPermissionRequest {
    return new SetPermissionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetPermissionRequest | PlainMessage<SetPermissionRequest> | undefined, b: SetPermissionRequest | PlainMessage<SetPermissionRequest> | undefined): boolean {
    return proto3.util.equals(SetPermissionRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v2.SetPermissionResponse
 */
export class SetPermissionResponse extends Message<SetPermissionResponse> {
  /**
   * permission instance
   *
   * @generated from field: aserto.directory.common.v2.Permission result = 1;
   */
  result?: Permission;

  constructor(data?: PartialMessage<SetPermissionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v2.SetPermissionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Permission },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetPermissionResponse {
    return new SetPermissionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetPermissionResponse {
    return new SetPermissionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetPermissionResponse {
    return new SetPermissionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetPermissionResponse | PlainMessage<SetPermissionResponse> | undefined, b: SetPermissionResponse | PlainMessage<SetPermissionResponse> | undefined): boolean {
    return proto3.util.equals(SetPermissionResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v2.DeletePermissionRequest
 */
export class DeletePermissionRequest extends Message<DeletePermissionRequest> {
  /**
   *
   *
   * @generated from field: aserto.directory.common.v2.PermissionIdentifier param = 1;
   */
  param?: PermissionIdentifier;

  constructor(data?: PartialMessage<DeletePermissionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v2.DeletePermissionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "param", kind: "message", T: PermissionIdentifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePermissionRequest {
    return new DeletePermissionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePermissionRequest {
    return new DeletePermissionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePermissionRequest {
    return new DeletePermissionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePermissionRequest | PlainMessage<DeletePermissionRequest> | undefined, b: DeletePermissionRequest | PlainMessage<DeletePermissionRequest> | undefined): boolean {
    return proto3.util.equals(DeletePermissionRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v2.DeletePermissionResponse
 */
export class DeletePermissionResponse extends Message<DeletePermissionResponse> {
  /**
   * empty result
   *
   * @generated from field: google.protobuf.Empty result = 1;
   */
  result?: Empty;

  constructor(data?: PartialMessage<DeletePermissionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v2.DeletePermissionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Empty },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePermissionResponse {
    return new DeletePermissionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePermissionResponse {
    return new DeletePermissionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePermissionResponse {
    return new DeletePermissionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePermissionResponse | PlainMessage<DeletePermissionResponse> | undefined, b: DeletePermissionResponse | PlainMessage<DeletePermissionResponse> | undefined): boolean {
    return proto3.util.equals(DeletePermissionResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v2.SetObjectRequest
 */
export class SetObjectRequest extends Message<SetObjectRequest> {
  /**
   *
   *
   * @generated from field: aserto.directory.common.v2.Object object = 1;
   */
  object?: Object$;

  constructor(data?: PartialMessage<SetObjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v2.SetObjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: Object$ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetObjectRequest {
    return new SetObjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetObjectRequest {
    return new SetObjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetObjectRequest {
    return new SetObjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetObjectRequest | PlainMessage<SetObjectRequest> | undefined, b: SetObjectRequest | PlainMessage<SetObjectRequest> | undefined): boolean {
    return proto3.util.equals(SetObjectRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v2.SetObjectResponse
 */
export class SetObjectResponse extends Message<SetObjectResponse> {
  /**
   * object instance
   *
   * @generated from field: aserto.directory.common.v2.Object result = 1;
   */
  result?: Object$;

  constructor(data?: PartialMessage<SetObjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v2.SetObjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Object$ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetObjectResponse {
    return new SetObjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetObjectResponse {
    return new SetObjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetObjectResponse {
    return new SetObjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetObjectResponse | PlainMessage<SetObjectResponse> | undefined, b: SetObjectResponse | PlainMessage<SetObjectResponse> | undefined): boolean {
    return proto3.util.equals(SetObjectResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v2.DeleteObjectRequest
 */
export class DeleteObjectRequest extends Message<DeleteObjectRequest> {
  /**
   *
   *
   * @generated from field: aserto.directory.common.v2.ObjectIdentifier param = 1;
   */
  param?: ObjectIdentifier;

  constructor(data?: PartialMessage<DeleteObjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v2.DeleteObjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "param", kind: "message", T: ObjectIdentifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteObjectRequest {
    return new DeleteObjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteObjectRequest {
    return new DeleteObjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteObjectRequest {
    return new DeleteObjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteObjectRequest | PlainMessage<DeleteObjectRequest> | undefined, b: DeleteObjectRequest | PlainMessage<DeleteObjectRequest> | undefined): boolean {
    return proto3.util.equals(DeleteObjectRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v2.DeleteObjectResponse
 */
export class DeleteObjectResponse extends Message<DeleteObjectResponse> {
  /**
   * empty result
   *
   * @generated from field: google.protobuf.Empty result = 1;
   */
  result?: Empty;

  constructor(data?: PartialMessage<DeleteObjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v2.DeleteObjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Empty },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteObjectResponse {
    return new DeleteObjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteObjectResponse {
    return new DeleteObjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteObjectResponse {
    return new DeleteObjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteObjectResponse | PlainMessage<DeleteObjectResponse> | undefined, b: DeleteObjectResponse | PlainMessage<DeleteObjectResponse> | undefined): boolean {
    return proto3.util.equals(DeleteObjectResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v2.SetRelationRequest
 */
export class SetRelationRequest extends Message<SetRelationRequest> {
  /**
   *
   *
   * @generated from field: aserto.directory.common.v2.Relation relation = 1;
   */
  relation?: Relation;

  constructor(data?: PartialMessage<SetRelationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v2.SetRelationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relation", kind: "message", T: Relation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetRelationRequest {
    return new SetRelationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetRelationRequest {
    return new SetRelationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetRelationRequest {
    return new SetRelationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetRelationRequest | PlainMessage<SetRelationRequest> | undefined, b: SetRelationRequest | PlainMessage<SetRelationRequest> | undefined): boolean {
    return proto3.util.equals(SetRelationRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v2.SetRelationResponse
 */
export class SetRelationResponse extends Message<SetRelationResponse> {
  /**
   * relation instance
   *
   * @generated from field: aserto.directory.common.v2.Relation result = 1;
   */
  result?: Relation;

  constructor(data?: PartialMessage<SetRelationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v2.SetRelationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Relation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetRelationResponse {
    return new SetRelationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetRelationResponse {
    return new SetRelationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetRelationResponse {
    return new SetRelationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetRelationResponse | PlainMessage<SetRelationResponse> | undefined, b: SetRelationResponse | PlainMessage<SetRelationResponse> | undefined): boolean {
    return proto3.util.equals(SetRelationResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v2.DeleteRelationRequest
 */
export class DeleteRelationRequest extends Message<DeleteRelationRequest> {
  /**
   *
   *
   * @generated from field: aserto.directory.common.v2.RelationIdentifier param = 1;
   */
  param?: RelationIdentifier;

  constructor(data?: PartialMessage<DeleteRelationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v2.DeleteRelationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "param", kind: "message", T: RelationIdentifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRelationRequest {
    return new DeleteRelationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRelationRequest {
    return new DeleteRelationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRelationRequest {
    return new DeleteRelationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRelationRequest | PlainMessage<DeleteRelationRequest> | undefined, b: DeleteRelationRequest | PlainMessage<DeleteRelationRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRelationRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.writer.v2.DeleteRelationResponse
 */
export class DeleteRelationResponse extends Message<DeleteRelationResponse> {
  /**
   * empty result
   *
   * @generated from field: google.protobuf.Empty result = 1;
   */
  result?: Empty;

  constructor(data?: PartialMessage<DeleteRelationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.writer.v2.DeleteRelationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Empty },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRelationResponse {
    return new DeleteRelationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRelationResponse {
    return new DeleteRelationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRelationResponse {
    return new DeleteRelationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRelationResponse | PlainMessage<DeleteRelationResponse> | undefined, b: DeleteRelationResponse | PlainMessage<DeleteRelationResponse> | undefined): boolean {
    return proto3.util.equals(DeleteRelationResponse, a, b);
  }
}

