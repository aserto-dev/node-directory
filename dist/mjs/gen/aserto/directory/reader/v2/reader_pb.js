// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file aserto/directory/reader/v2/reader.proto (package aserto.directory.reader.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
import { Object$, ObjectDependency, ObjectIdentifier, ObjectType, ObjectTypeIdentifier, PaginationRequest, PaginationResponse, Permission, PermissionIdentifier, Relation, RelationIdentifier, RelationType, RelationTypeIdentifier } from "../../common/v2/common_pb.js";
/**
 * @generated from message aserto.directory.reader.v2.GetObjectTypeRequest
 */
export class GetObjectTypeRequest extends Message {
    /**
     * object type selector
     *
     * @generated from field: aserto.directory.common.v2.ObjectTypeIdentifier param = 1;
     */
    param;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetObjectTypeRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "param", kind: "message", T: ObjectTypeIdentifier },
    ]);
    static fromBinary(bytes, options) {
        return new GetObjectTypeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetObjectTypeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetObjectTypeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetObjectTypeRequest, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetObjectTypeResponse
 */
export class GetObjectTypeResponse extends Message {
    /**
     * object type instance
     *
     * @generated from field: aserto.directory.common.v2.ObjectType result = 1;
     */
    result;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetObjectTypeResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "result", kind: "message", T: ObjectType },
    ]);
    static fromBinary(bytes, options) {
        return new GetObjectTypeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetObjectTypeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetObjectTypeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetObjectTypeResponse, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetObjectTypesRequest
 */
export class GetObjectTypesRequest extends Message {
    /**
     * pagination request
     *
     * @generated from field: aserto.directory.common.v2.PaginationRequest page = 9;
     */
    page;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetObjectTypesRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 9, name: "page", kind: "message", T: PaginationRequest },
    ]);
    static fromBinary(bytes, options) {
        return new GetObjectTypesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetObjectTypesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetObjectTypesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetObjectTypesRequest, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetObjectTypesResponse
 */
export class GetObjectTypesResponse extends Message {
    /**
     * array of object types
     *
     * @generated from field: repeated aserto.directory.common.v2.ObjectType results = 1;
     */
    results = [];
    /**
     * pagination response
     *
     * @generated from field: aserto.directory.common.v2.PaginationResponse page = 9;
     */
    page;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetObjectTypesResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "results", kind: "message", T: ObjectType, repeated: true },
        { no: 9, name: "page", kind: "message", T: PaginationResponse },
    ]);
    static fromBinary(bytes, options) {
        return new GetObjectTypesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetObjectTypesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetObjectTypesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetObjectTypesResponse, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetRelationTypeRequest
 */
export class GetRelationTypeRequest extends Message {
    /**
     * relation type selector
     *
     * @generated from field: aserto.directory.common.v2.RelationTypeIdentifier param = 1;
     */
    param;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetRelationTypeRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "param", kind: "message", T: RelationTypeIdentifier },
    ]);
    static fromBinary(bytes, options) {
        return new GetRelationTypeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRelationTypeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRelationTypeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetRelationTypeRequest, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetRelationTypeResponse
 */
export class GetRelationTypeResponse extends Message {
    /**
     * relation type instance
     *
     * @generated from field: aserto.directory.common.v2.RelationType result = 1;
     */
    result;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetRelationTypeResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "result", kind: "message", T: RelationType },
    ]);
    static fromBinary(bytes, options) {
        return new GetRelationTypeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRelationTypeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRelationTypeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetRelationTypeResponse, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetRelationTypesRequest
 */
export class GetRelationTypesRequest extends Message {
    /**
     * object type selector
     *
     * @generated from field: aserto.directory.common.v2.ObjectTypeIdentifier param = 1;
     */
    param;
    /**
     * pagination request
     *
     * @generated from field: aserto.directory.common.v2.PaginationRequest page = 9;
     */
    page;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetRelationTypesRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "param", kind: "message", T: ObjectTypeIdentifier },
        { no: 9, name: "page", kind: "message", T: PaginationRequest },
    ]);
    static fromBinary(bytes, options) {
        return new GetRelationTypesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRelationTypesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRelationTypesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetRelationTypesRequest, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetRelationTypesResponse
 */
export class GetRelationTypesResponse extends Message {
    /**
     * array of relation types
     *
     * @generated from field: repeated aserto.directory.common.v2.RelationType results = 1;
     */
    results = [];
    /**
     * pagination response
     *
     * @generated from field: aserto.directory.common.v2.PaginationResponse page = 9;
     */
    page;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetRelationTypesResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "results", kind: "message", T: RelationType, repeated: true },
        { no: 9, name: "page", kind: "message", T: PaginationResponse },
    ]);
    static fromBinary(bytes, options) {
        return new GetRelationTypesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRelationTypesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRelationTypesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetRelationTypesResponse, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetObjectRequest
 */
export class GetObjectRequest extends Message {
    /**
     * object selector
     *
     * @generated from field: aserto.directory.common.v2.ObjectIdentifier param = 1;
     */
    param;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetObjectRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "param", kind: "message", T: ObjectIdentifier },
    ]);
    static fromBinary(bytes, options) {
        return new GetObjectRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetObjectRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetObjectRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetObjectRequest, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetObjectResponse
 */
export class GetObjectResponse extends Message {
    /**
     * object instance
     *
     * @generated from field: aserto.directory.common.v2.Object result = 1;
     */
    result;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetObjectResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "result", kind: "message", T: Object$ },
    ]);
    static fromBinary(bytes, options) {
        return new GetObjectResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetObjectResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetObjectResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetObjectResponse, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetObjectManyRequest
 */
export class GetObjectManyRequest extends Message {
    /**
     * object identifier list
     *
     * @generated from field: repeated aserto.directory.common.v2.ObjectIdentifier param = 1;
     */
    param = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetObjectManyRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "param", kind: "message", T: ObjectIdentifier, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new GetObjectManyRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetObjectManyRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetObjectManyRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetObjectManyRequest, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetObjectManyResponse
 */
export class GetObjectManyResponse extends Message {
    /**
     * array of object instances
     *
     * @generated from field: repeated aserto.directory.common.v2.Object results = 1;
     */
    results = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetObjectManyResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "results", kind: "message", T: Object$, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new GetObjectManyResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetObjectManyResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetObjectManyResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetObjectManyResponse, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetObjectsRequest
 */
export class GetObjectsRequest extends Message {
    /**
     * object type selector
     *
     * @generated from field: aserto.directory.common.v2.ObjectTypeIdentifier param = 1;
     */
    param;
    /**
     * pagination request
     *
     * @generated from field: aserto.directory.common.v2.PaginationRequest page = 9;
     */
    page;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetObjectsRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "param", kind: "message", T: ObjectTypeIdentifier },
        { no: 9, name: "page", kind: "message", T: PaginationRequest },
    ]);
    static fromBinary(bytes, options) {
        return new GetObjectsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetObjectsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetObjectsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetObjectsRequest, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetObjectsResponse
 */
export class GetObjectsResponse extends Message {
    /**
     * array of object instances
     *
     * @generated from field: repeated aserto.directory.common.v2.Object results = 1;
     */
    results = [];
    /**
     * pagination response
     *
     * @generated from field: aserto.directory.common.v2.PaginationResponse page = 9;
     */
    page;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetObjectsResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "results", kind: "message", T: Object$, repeated: true },
        { no: 9, name: "page", kind: "message", T: PaginationResponse },
    ]);
    static fromBinary(bytes, options) {
        return new GetObjectsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetObjectsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetObjectsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetObjectsResponse, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetRelationRequest
 */
export class GetRelationRequest extends Message {
    /**
     * relation selector
     *
     * @generated from field: aserto.directory.common.v2.RelationIdentifier param = 1;
     */
    param;
    /**
     * materialize relation objects
     *
     * @generated from field: optional bool with_objects = 2;
     */
    withObjects;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetRelationRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "param", kind: "message", T: RelationIdentifier },
        { no: 2, name: "with_objects", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new GetRelationRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRelationRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRelationRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetRelationRequest, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetRelationResponse
 */
export class GetRelationResponse extends Message {
    /**
     * array of relation instances
     *
     * @generated from field: repeated aserto.directory.common.v2.Relation results = 1;
     */
    results = [];
    /**
     * map of materialized relation objects
     *
     * @generated from field: map<string, aserto.directory.common.v2.Object> objects = 2;
     */
    objects = {};
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetRelationResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "results", kind: "message", T: Relation, repeated: true },
        { no: 2, name: "objects", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: Object$ } },
    ]);
    static fromBinary(bytes, options) {
        return new GetRelationResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRelationResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRelationResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetRelationResponse, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetRelationsRequest
 */
export class GetRelationsRequest extends Message {
    /**
     * relation selector
     *
     * @generated from field: aserto.directory.common.v2.RelationIdentifier param = 1;
     */
    param;
    /**
     * pagination request
     *
     * @generated from field: aserto.directory.common.v2.PaginationRequest page = 9;
     */
    page;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetRelationsRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "param", kind: "message", T: RelationIdentifier },
        { no: 9, name: "page", kind: "message", T: PaginationRequest },
    ]);
    static fromBinary(bytes, options) {
        return new GetRelationsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRelationsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRelationsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetRelationsRequest, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetRelationsResponse
 */
export class GetRelationsResponse extends Message {
    /**
     * array of relation instances
     *
     * @generated from field: repeated aserto.directory.common.v2.Relation results = 1;
     */
    results = [];
    /**
     * pagination response
     *
     * @generated from field: aserto.directory.common.v2.PaginationResponse page = 9;
     */
    page;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetRelationsResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "results", kind: "message", T: Relation, repeated: true },
        { no: 9, name: "page", kind: "message", T: PaginationResponse },
    ]);
    static fromBinary(bytes, options) {
        return new GetRelationsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRelationsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRelationsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetRelationsResponse, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetPermissionRequest
 */
export class GetPermissionRequest extends Message {
    /**
     * permission selector
     *
     * @generated from field: aserto.directory.common.v2.PermissionIdentifier param = 1;
     */
    param;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetPermissionRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "param", kind: "message", T: PermissionIdentifier },
    ]);
    static fromBinary(bytes, options) {
        return new GetPermissionRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetPermissionRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetPermissionRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetPermissionRequest, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetPermissionResponse
 */
export class GetPermissionResponse extends Message {
    /**
     * permission instance
     *
     * @generated from field: aserto.directory.common.v2.Permission result = 1;
     */
    result;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetPermissionResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "result", kind: "message", T: Permission },
    ]);
    static fromBinary(bytes, options) {
        return new GetPermissionResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetPermissionResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetPermissionResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetPermissionResponse, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetPermissionsRequest
 */
export class GetPermissionsRequest extends Message {
    /**
     * pagination request
     *
     * @generated from field: aserto.directory.common.v2.PaginationRequest page = 9;
     */
    page;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetPermissionsRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 9, name: "page", kind: "message", T: PaginationRequest },
    ]);
    static fromBinary(bytes, options) {
        return new GetPermissionsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetPermissionsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetPermissionsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetPermissionsRequest, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetPermissionsResponse
 */
export class GetPermissionsResponse extends Message {
    /**
     * array of permissions
     *
     * @generated from field: repeated aserto.directory.common.v2.Permission results = 1;
     */
    results = [];
    /**
     * pagination response
     *
     * @generated from field: aserto.directory.common.v2.PaginationResponse page = 9;
     */
    page;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetPermissionsResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "results", kind: "message", T: Permission, repeated: true },
        { no: 9, name: "page", kind: "message", T: PaginationResponse },
    ]);
    static fromBinary(bytes, options) {
        return new GetPermissionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetPermissionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetPermissionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetPermissionsResponse, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.CheckPermissionRequest
 */
export class CheckPermissionRequest extends Message {
    /**
     * subject selector
     *
     * @generated from field: aserto.directory.common.v2.ObjectIdentifier subject = 1;
     */
    subject;
    /**
     * permission selector
     *
     * @generated from field: aserto.directory.common.v2.PermissionIdentifier permission = 2;
     */
    permission;
    /**
     * object selector
     *
     * @generated from field: aserto.directory.common.v2.ObjectIdentifier object = 3;
     */
    object;
    /**
     * collect trace information
     *
     * @generated from field: bool trace = 7;
     */
    trace = false;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.CheckPermissionRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "subject", kind: "message", T: ObjectIdentifier },
        { no: 2, name: "permission", kind: "message", T: PermissionIdentifier },
        { no: 3, name: "object", kind: "message", T: ObjectIdentifier },
        { no: 7, name: "trace", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ]);
    static fromBinary(bytes, options) {
        return new CheckPermissionRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CheckPermissionRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CheckPermissionRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CheckPermissionRequest, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.CheckPermissionResponse
 */
export class CheckPermissionResponse extends Message {
    /**
     * check result (BOOL)
     *
     * @generated from field: bool check = 1;
     */
    check = false;
    /**
     * trace information
     *
     * @generated from field: repeated string trace = 2;
     */
    trace = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.CheckPermissionResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "trace", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new CheckPermissionResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CheckPermissionResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CheckPermissionResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CheckPermissionResponse, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.CheckRelationRequest
 */
export class CheckRelationRequest extends Message {
    /**
     * subject selector
     *
     * @generated from field: aserto.directory.common.v2.ObjectIdentifier subject = 1;
     */
    subject;
    /**
     * relation selector
     *
     * @generated from field: aserto.directory.common.v2.RelationTypeIdentifier relation = 2;
     */
    relation;
    /**
     * object selector
     *
     * @generated from field: aserto.directory.common.v2.ObjectIdentifier object = 3;
     */
    object;
    /**
     * collect trace information
     *
     * @generated from field: bool trace = 7;
     */
    trace = false;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.CheckRelationRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "subject", kind: "message", T: ObjectIdentifier },
        { no: 2, name: "relation", kind: "message", T: RelationTypeIdentifier },
        { no: 3, name: "object", kind: "message", T: ObjectIdentifier },
        { no: 7, name: "trace", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ]);
    static fromBinary(bytes, options) {
        return new CheckRelationRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CheckRelationRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CheckRelationRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CheckRelationRequest, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.CheckRelationResponse
 */
export class CheckRelationResponse extends Message {
    /**
     * check result (BOOL)
     *
     * @generated from field: bool check = 1;
     */
    check = false;
    /**
     * trace information
     *
     * @generated from field: repeated string trace = 2;
     */
    trace = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.CheckRelationResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "trace", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new CheckRelationResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CheckRelationResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CheckRelationResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CheckRelationResponse, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.CheckResponse
 */
export class CheckResponse extends Message {
    /**
     * check result (BOOL)
     *
     * @generated from field: bool check = 1;
     */
    check = false;
    /**
     * trace information
     *
     * @generated from field: repeated string trace = 2;
     */
    trace = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.CheckResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "trace", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new CheckResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CheckResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CheckResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CheckResponse, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetGraphRequest
 */
export class GetGraphRequest extends Message {
    /**
     * anchor selector
     *
     * @generated from field: aserto.directory.common.v2.ObjectIdentifier anchor = 1;
     */
    anchor;
    /**
     * subject selector
     *
     * @generated from field: aserto.directory.common.v2.ObjectIdentifier subject = 2;
     */
    subject;
    /**
     * relation selector
     *
     * @generated from field: aserto.directory.common.v2.RelationTypeIdentifier relation = 3;
     */
    relation;
    /**
     * object selector
     *
     * @generated from field: aserto.directory.common.v2.ObjectIdentifier object = 4;
     */
    object;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetGraphRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "anchor", kind: "message", T: ObjectIdentifier },
        { no: 2, name: "subject", kind: "message", T: ObjectIdentifier },
        { no: 3, name: "relation", kind: "message", T: RelationTypeIdentifier },
        { no: 4, name: "object", kind: "message", T: ObjectIdentifier },
    ]);
    static fromBinary(bytes, options) {
        return new GetGraphRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetGraphRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetGraphRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetGraphRequest, a, b);
    }
}
/**
 * @generated from message aserto.directory.reader.v2.GetGraphResponse
 */
export class GetGraphResponse extends Message {
    /**
     * dependency graph
     *
     * @generated from field: repeated aserto.directory.common.v2.ObjectDependency results = 1;
     */
    results = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "aserto.directory.reader.v2.GetGraphResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "results", kind: "message", T: ObjectDependency, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new GetGraphResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetGraphResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetGraphResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetGraphResponse, a, b);
    }
}
